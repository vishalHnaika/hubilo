{"version":3,"file":"ng2-canvas-whiteboard.umd.min.js","sources":["../../src/canvas-whiteboard.component.ts","../../src/shapes/canvas-whiteboard-shape-selector.component.ts","../../src/canvas-whiteboard-colorpicker.component.ts","../../src/shapes/canvas-whiteboard-shape-preview.component.ts","../../src/ng2-canvas-whiteboard.module.ts","../../src/canvas-whiteboard-update.model.ts","../../src/template.ts","../../src/canvas-whiteboard.service.ts","../../src/canvas-whiteboard-point.ts","../../src/shapes/canvas-whiteboard-shape-options.ts","../../src/shapes/canvas-whiteboard-shape.ts","../../src/shapes/circle-shape.ts","../../src/shapes/rectangle-shape.ts","../../src/shapes/free-hand-shape.ts","../../src/shapes/smiley-shape.ts","../../src/shapes/star-shape.ts","../../src/shapes/line-shape.ts","../../src/shapes/canvas-whiteboard-shape.service.ts"],"sourcesContent":["import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ElementRef,\n    OnInit,\n    OnChanges, OnDestroy, AfterViewInit, NgZone, ChangeDetectorRef\n} from '@angular/core';\nimport {CanvasWhiteboardUpdate, CanvasWhiteboardUpdateType} from \"./canvas-whiteboard-update.model\";\nimport {DEFAULT_STYLES} from \"./template\";\nimport {CanvasWhiteboardService} from \"./canvas-whiteboard.service\";\nimport {CanvasWhiteboardOptions} from \"./canvas-whiteboard-options\";\nimport {CanvasWhiteboardShape} from \"./shapes/canvas-whiteboard-shape\";\nimport {CanvasWhiteboardPoint} from \"./canvas-whiteboard-point\";\nimport {CanvasWhiteboardShapeService, INewCanvasWhiteboardShape} from \"./shapes/canvas-whiteboard-shape.service\";\nimport {CanvasWhiteboardShapeOptions} from \"./shapes/canvas-whiteboard-shape-options\";\nimport {fromEvent, Subscription} from \"rxjs/index\";\nimport {debounceTime, distinctUntilChanged} from \"rxjs/operators\";\nimport {cloneDeep} from \"lodash\";\n\n@Component({\n    selector: 'canvas-whiteboard',\n    template:\n            `\n        <div class=\"canvas_wrapper_div\">\n            <div class=\"canvas_whiteboard_buttons\">\n                <canvas-whiteboard-shape-selector *ngIf=\"shapeSelectorEnabled\"\n                                                  [showShapeSelector]=\"showShapeSelector\"\n                                                  [selectedShapeConstructor]=\"selectedShapeConstructor\"\n                                                  [shapeOptions]=\"generateShapePreviewOptions()\"\n                                                  (onToggleShapeSelector)=\"toggleShapeSelector($event)\"\n                                                  (onShapeSelected)=\"selectShape($event)\"></canvas-whiteboard-shape-selector>\n\n                <canvas-whiteboard-colorpicker *ngIf=\"colorPickerEnabled\"\n                                               [previewText]=\"'Fill'\"\n                                               [showColorPicker]=\"showFillColorPicker\"\n                                               [selectedColor]=\"fillColor\"\n                                               (onToggleColorPicker)=\"toggleFillColorPicker($event)\"\n                                               (onColorSelected)=\"changeFillColor($event)\">\n                </canvas-whiteboard-colorpicker>\n\n                <canvas-whiteboard-colorpicker *ngIf=\"colorPickerEnabled\"\n                                               [previewText]=\"'Stroke'\"\n                                               [showColorPicker]=\"showStrokeColorPicker\"\n                                               [selectedColor]=\"strokeColor\"\n                                               (onToggleColorPicker)=\"toggleStrokeColorPicker($event)\"\n                                               (onColorSelected)=\"changeStrokeColor($event)\">\n                </canvas-whiteboard-colorpicker>\n\n\n                <button *ngIf=\"drawButtonEnabled\" (click)=\"toggleDrawingEnabled()\"\n                        [class.canvas_whiteboard_button-draw_animated]=\"getDrawingEnabled()\"\n                        class=\"canvas_whiteboard_button canvas_whiteboard_button-draw\" type=\"button\">\n                    <i [class]=\"drawButtonClass\" aria-hidden=\"true\"></i> {{drawButtonText}}\n                </button>\n\n                <button *ngIf=\"clearButtonEnabled\" (click)=\"clearCanvasLocal()\" type=\"button\"\n                        class=\"canvas_whiteboard_button canvas_whiteboard_button-clear\">\n                    <i [class]=\"clearButtonClass\" aria-hidden=\"true\"></i> {{clearButtonText}}\n                </button>\n\n                <button *ngIf=\"undoButtonEnabled\" (click)=\"undoLocal()\" type=\"button\"\n                        class=\"canvas_whiteboard_button canvas_whiteboard_button-undo\">\n                    <i [class]=\"undoButtonClass\" aria-hidden=\"true\"></i> {{undoButtonText}}\n                </button>\n\n                <button *ngIf=\"redoButtonEnabled\" (click)=\"redoLocal()\" type=\"button\"\n                        class=\"canvas_whiteboard_button canvas_whiteboard_button-redo\">\n                    <i [class]=\"redoButtonClass\" aria-hidden=\"true\"></i> {{redoButtonText}}\n                </button>\n                <button *ngIf=\"saveDataButtonEnabled\" (click)=\"saveLocal()\" type=\"button\"\n                        class=\"canvas_whiteboard_button canvas_whiteboard_button-save\">\n                    <i [class]=\"saveDataButtonClass\" aria-hidden=\"true\"></i> {{saveDataButtonText}}\n                </button>\n            </div>\n            <canvas #canvas class=\"canvas_whiteboard\"></canvas>\n            <canvas #incompleteShapesCanvas class=\"incomplete_shapes_canvas_whiteboard\"\n                    (mousedown)=\"canvasUserEvents($event)\" (mouseup)=\"canvasUserEvents($event)\"\n                    (mousemove)=\"canvasUserEvents($event)\" (mouseout)=\"canvasUserEvents($event)\"\n                    (touchstart)=\"canvasUserEvents($event)\" (touchmove)=\"canvasUserEvents($event)\"\n                    (touchend)=\"canvasUserEvents($event)\" (touchcancel)=\"canvasUserEvents($event)\"></canvas>\n        </div>\n    `,\n    styles: [DEFAULT_STYLES]\n})\nexport class CanvasWhiteboardComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {\n    @Input() options: CanvasWhiteboardOptions;\n\n    // Number of ms to wait before sending out the updates as an array\n    @Input() batchUpdateTimeoutDuration: number = 100;\n\n    private _imageUrl: string;\n    @Input() set imageUrl(imageUrl: string) {\n        this._imageUrl = imageUrl;\n        this._imageElement = null;\n        this._redrawHistory();\n    }\n\n    get imageUrl() {\n        return this._imageUrl;\n    }\n\n    @Input() aspectRatio: number;\n    @Input() drawButtonClass: string;\n    @Input() clearButtonClass: string;\n    @Input() undoButtonClass: string;\n    @Input() redoButtonClass: string;\n    @Input() saveDataButtonClass: string;\n    @Input() drawButtonText: string = \"\";\n    @Input() clearButtonText: string = \"\";\n    @Input() undoButtonText: string = \"\";\n    @Input() redoButtonText: string = \"\";\n    @Input() saveDataButtonText: string = \"\";\n    @Input() drawButtonEnabled: boolean = true;\n    @Input() clearButtonEnabled: boolean = true;\n    @Input() undoButtonEnabled: boolean = false;\n    @Input() redoButtonEnabled: boolean = false;\n    @Input() saveDataButtonEnabled: boolean = false;\n    @Input() shouldDownloadDrawing: boolean = true;\n    @Input() colorPickerEnabled: boolean = false;\n    @Input() lineWidth: number = 2;\n    @Input() strokeColor: string = \"rgba(0, 0, 0, 1)\";\n    @Input() startingColor: string = \"#fff\";\n    @Input() scaleFactor: number = 0;\n    @Input() drawingEnabled: boolean = false;\n    @Input() showStrokeColorPicker: boolean = false;\n    @Input() showFillColorPicker: boolean = false;\n    @Input() downloadedFileName: string;\n\n    @Input() lineJoin: string = \"round\";\n    @Input() lineCap: string = \"round\";\n    @Input() shapeSelectorEnabled: boolean = true;\n    @Input() showShapeSelector: boolean = false;\n    @Input() fillColor: string = \"rgba(0,0,0,0)\";\n\n    @Output() onClear = new EventEmitter<any>();\n    @Output() onUndo = new EventEmitter<any>();\n    @Output() onRedo = new EventEmitter<any>();\n    @Output() onBatchUpdate = new EventEmitter<CanvasWhiteboardUpdate[]>();\n    @Output() onImageLoaded = new EventEmitter<any>();\n    @Output() onSave = new EventEmitter<string | Blob>();\n\n    @ViewChild('canvas') canvas: ElementRef;\n    context: CanvasRenderingContext2D;\n\n    @ViewChild('incompleteShapesCanvas') private _incompleteShapesCanvas: ElementRef;\n    private _incompleteShapesCanvasContext: CanvasRenderingContext2D;\n    private _incompleteShapesMap: Map<string, CanvasWhiteboardShape>;\n\n    private _imageElement: any;\n\n    private _canDraw = true;\n\n    private _clientDragging = false;\n\n    private _updateHistory: CanvasWhiteboardUpdate[] = [];\n    private _lastUUID: string;\n    private _shapesMap: Map<string, CanvasWhiteboardShape>;\n\n    private _undoStack: string[] = []; // Stores the value of start and count for each continuous stroke\n    private _redoStack: string[] = [];\n    private _batchUpdates: CanvasWhiteboardUpdate[] = [];\n    private _updatesNotDrawn: any = [];\n\n    private _updateTimeout: any;\n\n    private _canvasWhiteboardServiceSubscriptions: Subscription[] = [];\n    private _resizeSubscription: Subscription;\n    private _registeredShapesSubscription: Subscription;\n\n    selectedShapeConstructor: INewCanvasWhiteboardShape<CanvasWhiteboardShape>;\n    canvasWhiteboardShapePreviewOptions: CanvasWhiteboardShapeOptions;\n\n    constructor(private ngZone: NgZone,\n                private _changeDetector: ChangeDetectorRef,\n                private _canvasWhiteboardService: CanvasWhiteboardService,\n                private _canvasWhiteboardShapeService: CanvasWhiteboardShapeService) {\n        this._shapesMap = new Map<string, CanvasWhiteboardShape>();\n        this._incompleteShapesMap = new Map<string, CanvasWhiteboardShape>();\n        this.canvasWhiteboardShapePreviewOptions = this.generateShapePreviewOptions();\n    }\n\n    /**\n     * Initialize the canvas drawing context. If we have an aspect ratio set up, the canvas will resize\n     * according to the aspect ratio.\n     */\n    ngOnInit(): void {\n        this._initInputsFromOptions(this.options);\n        this._initCanvasEventListeners();\n        this._initCanvasServiceObservables();\n        this.context = this.canvas.nativeElement.getContext(\"2d\");\n        this._incompleteShapesCanvasContext = this._incompleteShapesCanvas.nativeElement.getContext(\"2d\");\n    }\n\n    /**\n     * If an image exists and it's url changes, we need to redraw the new image on the canvas.\n     */\n    ngOnChanges(changes: any): void {\n        if (changes.options && changes.options.currentValue != changes.options.previousValue) {\n            this._initInputsFromOptions(changes.options.currentValue);\n        }\n    }\n\n    /**\n     * Recalculate the width and height of the canvas after the view has been fully initialized\n     */\n    ngAfterViewInit(): void {\n        this._calculateCanvasWidthAndHeight();\n        this._redrawHistory();\n    }\n\n    /**\n     * This method reads the options which are helpful since they can be really long when specified in HTML\n     * This method is also called everytime the options object changes\n     * For security reasons we must check each item on its own since if we iterate the keys\n     * we may be injected with malicious values\n     *\n     * @param options\n     */\n    private _initInputsFromOptions(options: CanvasWhiteboardOptions) {\n        if (options) {\n            if (!this._isNullOrUndefined(options.batchUpdateTimeoutDuration)) this.batchUpdateTimeoutDuration = options.batchUpdateTimeoutDuration;\n            if (!this._isNullOrUndefined(options.imageUrl)) this.imageUrl = options.imageUrl;\n            if (!this._isNullOrUndefined(options.aspectRatio)) this.aspectRatio = options.aspectRatio;\n            if (!this._isNullOrUndefined(options.drawButtonClass)) this.drawButtonClass = options.drawButtonClass;\n            if (!this._isNullOrUndefined(options.clearButtonClass)) this.clearButtonClass = options.clearButtonClass;\n            if (!this._isNullOrUndefined(options.undoButtonClass)) this.undoButtonClass = options.undoButtonClass;\n            if (!this._isNullOrUndefined(options.redoButtonClass)) this.redoButtonClass = options.redoButtonClass;\n            if (!this._isNullOrUndefined(options.saveDataButtonClass)) this.saveDataButtonClass = options.saveDataButtonClass;\n            if (!this._isNullOrUndefined(options.drawButtonText)) this.drawButtonText = options.drawButtonText;\n            if (!this._isNullOrUndefined(options.clearButtonText)) this.clearButtonText = options.clearButtonText;\n            if (!this._isNullOrUndefined(options.undoButtonText)) this.undoButtonText = options.undoButtonText;\n            if (!this._isNullOrUndefined(options.redoButtonText)) this.redoButtonText = options.redoButtonText;\n            if (!this._isNullOrUndefined(options.saveDataButtonText)) this.saveDataButtonText = options.saveDataButtonText;\n            if (!this._isNullOrUndefined(options.drawButtonEnabled)) this.drawButtonEnabled = options.drawButtonEnabled;\n            if (!this._isNullOrUndefined(options.clearButtonEnabled)) this.clearButtonEnabled = options.clearButtonEnabled;\n            if (!this._isNullOrUndefined(options.undoButtonEnabled)) this.undoButtonEnabled = options.undoButtonEnabled;\n            if (!this._isNullOrUndefined(options.redoButtonEnabled)) this.redoButtonEnabled = options.redoButtonEnabled;\n            if (!this._isNullOrUndefined(options.saveDataButtonEnabled)) this.saveDataButtonEnabled = options.saveDataButtonEnabled;\n            if (!this._isNullOrUndefined(options.colorPickerEnabled)) this.colorPickerEnabled = options.colorPickerEnabled;\n            if (!this._isNullOrUndefined(options.lineWidth)) this.lineWidth = options.lineWidth;\n            if (!this._isNullOrUndefined(options.strokeColor)) this.strokeColor = options.strokeColor;\n            if (!this._isNullOrUndefined(options.shouldDownloadDrawing)) this.shouldDownloadDrawing = options.shouldDownloadDrawing;\n            if (!this._isNullOrUndefined(options.startingColor)) this.startingColor = options.startingColor;\n            if (!this._isNullOrUndefined(options.scaleFactor)) this.scaleFactor = options.scaleFactor;\n            if (!this._isNullOrUndefined(options.drawingEnabled)) this.drawingEnabled = options.drawingEnabled;\n            if (!this._isNullOrUndefined(options.downloadedFileName)) this.downloadedFileName = options.downloadedFileName;\n            if (!this._isNullOrUndefined(options.lineJoin)) this.lineJoin = options.lineJoin;\n            if (!this._isNullOrUndefined(options.lineCap)) this.lineCap = options.lineCap;\n            if (!this._isNullOrUndefined(options.shapeSelectorEnabled)) this.shapeSelectorEnabled = options.shapeSelectorEnabled;\n            if (!this._isNullOrUndefined(options.showShapeSelector)) this.showShapeSelector = options.showShapeSelector;\n            if (!this._isNullOrUndefined(options.fillColor)) this.fillColor = options.fillColor;\n            if (!this._isNullOrUndefined(options.showStrokeColorPicker)) this.showStrokeColorPicker = options.showStrokeColorPicker;\n            if (!this._isNullOrUndefined(options.showFillColorPicker)) this.showFillColorPicker = options.showFillColorPicker;\n        }\n    }\n\n    private _isNullOrUndefined(property: any): boolean {\n        return property === null || property === undefined;\n    }\n\n    /**\n     * Init global window listeners like resize and keydown\n     */\n    private _initCanvasEventListeners(): void {\n        this.ngZone.runOutsideAngular(() => {\n            this._resizeSubscription = fromEvent(window, 'resize')\n                .pipe(\n                    debounceTime(200),\n                    distinctUntilChanged()\n                )\n                .subscribe(() => {\n                    this.ngZone.run(() => {\n                        this._redrawCanvasOnResize();\n                    });\n                });\n        });\n\n        window.addEventListener(\"keydown\", this._canvasKeyDown.bind(this), false);\n    }\n\n    /**\n     * Subscribes to new signals in the canvas whiteboard service and executes methods accordingly\n     * Because of circular publishing and subscribing, the canvas methods do not use the service when\n     * local actions are completed (Ex. clicking undo from the button inside this component)\n     */\n    private _initCanvasServiceObservables(): void {\n        this._canvasWhiteboardServiceSubscriptions.push(this._canvasWhiteboardService.canvasDrawSubject$\n            .subscribe(updates => this.drawUpdates(updates)));\n        this._canvasWhiteboardServiceSubscriptions.push(this._canvasWhiteboardService.canvasClearSubject$\n            .subscribe(() => this.clearCanvas()));\n        this._canvasWhiteboardServiceSubscriptions.push(this._canvasWhiteboardService.canvasUndoSubject$\n            .subscribe((updateUUD) => this._undoCanvas(updateUUD)));\n        this._canvasWhiteboardServiceSubscriptions.push(this._canvasWhiteboardService.canvasRedoSubject$\n            .subscribe((updateUUD) => this._redoCanvas(updateUUD)));\n\n        this._registeredShapesSubscription = this._canvasWhiteboardShapeService.registeredShapes$.subscribe((shapes) => {\n            if (!this.selectedShapeConstructor || !this._canvasWhiteboardShapeService.isRegisteredShape(this.selectedShapeConstructor)) {\n                this.selectedShapeConstructor = shapes[0];\n            }\n        });\n    }\n\n    /**\n     * Calculate the canvas width and height from it's parent container width and height (use aspect ratio if needed)\n     */\n    private _calculateCanvasWidthAndHeight(): void {\n        this.context.canvas.width = this.canvas.nativeElement.parentNode.clientWidth;\n        if (this.aspectRatio) {\n            this.context.canvas.height = this.canvas.nativeElement.parentNode.clientWidth * this.aspectRatio;\n        } else {\n            this.context.canvas.height = this.canvas.nativeElement.parentNode.clientHeight;\n        }\n\n        this._incompleteShapesCanvasContext.canvas.width = this.context.canvas.width;\n        this._incompleteShapesCanvasContext.canvas.height = this.context.canvas.height;\n    }\n\n    /**\n     * Load an image and draw it on the canvas (if an image exists)\n     * @param callbackFn A function that is called after the image loading is finished\n     * @return Emits a value when the image has been loaded.\n     */\n    private _loadImage(callbackFn?: any): void {\n        this._canDraw = false;\n\n        //If we already have the image there is no need to acquire it\n        if (this._imageElement) {\n            this._canDraw = true;\n            callbackFn && callbackFn();\n            return;\n        }\n\n        this._imageElement = new Image();\n        this._imageElement.addEventListener(\"load\", () => {\n            this._canDraw = true;\n            callbackFn && callbackFn();\n            this.onImageLoaded.emit(true);\n        });\n        this._imageElement.src = this.imageUrl;\n    }\n\n    /**\n     * Sends a notification after clearing the canvas\n     * This method should only be called from the clear button in this component since it will emit an clear event\n     * If the client calls this method he may create a circular clear action which may cause danger.\n     */\n    clearCanvasLocal(): void {\n        this.clearCanvas();\n        this.onClear.emit(true);\n    }\n\n    /**\n     * Clears all content on the canvas.\n     */\n    clearCanvas(): void {\n        this._removeCanvasData();\n        this._redoStack = [];\n    }\n\n    /**\n     * This method resets the state of the canvas and redraws it.\n     * It calls a callback function after redrawing\n     * @param callbackFn\n     */\n    private _removeCanvasData(callbackFn?: any): void {\n        this._shapesMap = new Map<string, CanvasWhiteboardShape>();\n        this._clientDragging = false;\n        this._updateHistory = [];\n        this._undoStack = [];\n        this._redrawBackground(callbackFn);\n    }\n\n    /**\n     * Clears the canvas and redraws the image if the url exists.\n     * @param callbackFn A function that is called after the background is redrawn\n     * @return Emits a value when the clearing is finished\n     */\n    private _redrawBackground(callbackFn?: any): void {\n        if (this.context) {\n            if (this.imageUrl) {\n                this._loadImage(() => {\n                    this.context.save();\n                    this._drawImage(this.context, this._imageElement, 0, 0, this.context.canvas.width, this.context.canvas.height, 0.5, 0.5);\n                    this.context.restore();\n                    this._drawMissingUpdates();\n                    callbackFn && callbackFn();\n                });\n            } else {\n                this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n                this._drawStartingColor();\n                callbackFn && callbackFn();\n            }\n        }\n    }\n\n    private _drawStartingColor() {\n        let previousFillStyle = this.context.fillStyle;\n        this.context.save();\n\n        this.context.fillStyle = this.startingColor;\n        this.context.fillRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n        this.context.fillStyle = previousFillStyle;\n\n        this.context.restore();\n    }\n\n\n    /**\n     * @deprecated Use getDrawingEnabled(): boolean\n     */\n    getShouldDraw(): boolean {\n        return this.getDrawingEnabled();\n    }\n\n    /**\n     * Returns a value of whether the user clicked the draw button on the canvas.\n     */\n    getDrawingEnabled(): boolean {\n        return this.drawingEnabled;\n    }\n\n    /**\n     * Toggles drawing on the canvas. It is called via the draw button on the canvas.\n     */\n    toggleDrawingEnabled(): void {\n        this.drawingEnabled = !this.drawingEnabled;\n    }\n\n    /**\n     * Set if drawing is enabled from the client using the canvas\n     * @param drawingEnabled\n     */\n    setDrawingEnabled(drawingEnabled: boolean): void {\n        this.drawingEnabled = drawingEnabled;\n    }\n\n    /**\n     * @deprecated Please use the changeStrokeColor(newStrokeColor: string): void method\n     */\n    changeColor(newStrokeColor: string): void {\n        this.changeStrokeColor(newStrokeColor);\n    }\n\n    /**\n     * Replaces the drawing color with a new color\n     * The format should be (\"#ffffff\" or \"rgb(r,g,b,a?)\")\n     * This method is public so that anyone can access the canvas and change the stroke color\n     *\n     * @param newStrokeColor The new stroke color\n     */\n    changeStrokeColor(newStrokeColor: string): void {\n        this.strokeColor = newStrokeColor;\n\n        this.canvasWhiteboardShapePreviewOptions = this.generateShapePreviewOptions();\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Replaces the fill color with a new color\n     * The format should be (\"#ffffff\" or \"rgb(r,g,b,a?)\")\n     * This method is public so that anyone can access the canvas and change the fill color\n     *\n     * @param newFillColor The new fill color\n     */\n    changeFillColor(newFillColor: string): void {\n        this.fillColor = newFillColor;\n        this.canvasWhiteboardShapePreviewOptions = this.generateShapePreviewOptions();\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * This method is invoked by the undo button on the canvas screen\n     * It calls the global undo method and emits a notification after undoing.\n     * This method should only be called from the undo button in this component since it will emit an undo event\n     * If the client calls this method he may create a circular undo action which may cause danger.\n     */\n    undoLocal(): void {\n        this.undo((updateUUID) => {\n            this._redoStack.push(updateUUID);\n            this.onUndo.emit(updateUUID);\n        });\n    }\n\n    /**\n     * This methods selects the last uuid prepares it for undoing (making the whole update sequence invisible)\n     * This method can be called if the canvas component is a ViewChild of some other component.\n     * This method will work even if the undo button has been disabled\n     */\n    undo(callbackFn?: Function): void {\n        if (!this._undoStack.length) return;\n\n        let updateUUID = this._undoStack.pop();\n        this._undoCanvas(updateUUID);\n        callbackFn && callbackFn(updateUUID);\n    }\n\n    /**\n     * This method takes an UUID for an update, and redraws the canvas by making all updates with that uuid invisible\n     * @param updateUUID\n     */\n    private _undoCanvas(updateUUID: string): void {\n        if (this._shapesMap.has(updateUUID)) {\n            let shape = this._shapesMap.get(updateUUID);\n            shape.isVisible = false;\n            this.drawAllShapes();\n        }\n    }\n\n    /**\n     * This method is invoked by the redo button on the canvas screen\n     * It calls the global redo method and emits a notification after redoing\n     * This method should only be called from the redo button in this component since it will emit an redo event\n     * If the client calls this method he may create a circular redo action which may cause danger.\n     */\n    redoLocal(): void {\n        this.redo((updateUUID) => {\n            this._undoStack.push(updateUUID);\n            this.onRedo.emit(updateUUID);\n        });\n    }\n\n    /**\n     * This methods selects the last uuid prepares it for redoing (making the whole update sequence visible)\n     * This method can be called if the canvas component is a ViewChild of some other component.\n     * This method will work even if the redo button has been disabled\n     */\n    redo(callbackFn?: any): void {\n        if (!this._redoStack.length) return;\n\n        let updateUUID = this._redoStack.pop();\n        this._redoCanvas(updateUUID);\n        callbackFn && callbackFn(updateUUID);\n    }\n\n    /**\n     * This method takes an UUID for an update, and redraws the canvas by making all updates with that uuid visible\n     * @param updateUUID\n     */\n    private _redoCanvas(updateUUID: string): void {\n        if (this._shapesMap.has(updateUUID)) {\n            let shape = this._shapesMap.get(updateUUID);\n            shape.isVisible = true;\n\n            this.drawAllShapes();\n        }\n    }\n\n    /**\n     * Catches the Mouse and Touch events made on the canvas.\n     * If drawing is disabled (If an image exists but it's not loaded, or the user did not click Draw),\n     * this function does nothing.\n     *\n     * If a \"mousedown | touchstart\" event is triggered, dragging will be set to true and an CanvasWhiteboardUpdate object\n     * of type \"start\" will be drawn and then sent as an update to all receiving ends.\n     *\n     * If a \"mousemove | touchmove\" event is triggered and the client is dragging, an CanvasWhiteboardUpdate object\n     * of type \"drag\" will be drawn and then sent as an update to all receiving ends.\n     *\n     * If a \"mouseup, mouseout | touchend, touchcancel\" event is triggered, dragging will be set to false and\n     * an CanvasWhiteboardUpdate object of type \"stop\" will be drawn and then sent as an update to all receiving ends.\n     *\n     */\n    canvasUserEvents(event: any): void {\n        //Ignore all if we didn't click the _draw! button or the image did not load\n        if (!this.drawingEnabled || !this._canDraw) {\n            return;\n        }\n\n        // Ignore mouse move Events if we're not dragging\n        if (!this._clientDragging\n            && (event.type === 'mousemove'\n                || event.type === 'touchmove'\n                || event.type === 'mouseout'\n                || event.type === 'touchcancel'\n                || event.type === 'mouseup'\n                || event.type === 'touchend'\n                || event.type === 'mouseout')) {\n            return;\n        }\n\n        if (event.target == this._incompleteShapesCanvas.nativeElement || event.target == this.canvas.nativeElement) {\n            event.preventDefault();\n        }\n\n        let update: CanvasWhiteboardUpdate;\n        let updateType: number;\n        let eventPosition: CanvasWhiteboardPoint = this._getCanvasEventPosition(event);\n        update = new CanvasWhiteboardUpdate(eventPosition.x, eventPosition.y);\n\n        switch (event.type) {\n            case 'mousedown':\n            case 'touchstart':\n                this._clientDragging = true;\n                this._lastUUID = this._generateUUID();\n                updateType = CanvasWhiteboardUpdateType.START;\n                this._redoStack = [];\n\n                this._addCurrentShapeDataToAnUpdate(update);\n                break;\n            case 'mousemove':\n            case 'touchmove':\n                if (!this._clientDragging) {\n                    return;\n                }\n                updateType = CanvasWhiteboardUpdateType.DRAG;\n                break;\n            case 'touchcancel':\n            case 'mouseup':\n            case 'touchend':\n            case 'mouseout':\n                this._clientDragging = false;\n                updateType = CanvasWhiteboardUpdateType.STOP;\n                this._undoStack.push(this._lastUUID);\n                break;\n        }\n\n        update.UUID = this._lastUUID;\n        update.type = updateType;\n\n        this._draw(update);\n        this._prepareToSendUpdate(update);\n    }\n\n    /**\n     * Get the coordinates (x,y) from a given event\n     * If it is a touch event, get the touch positions\n     * If we released the touch, the position will be placed in the changedTouches object\n     * If it is not a touch event, use the original mouse event received\n     * @param eventData\n     */\n    private _getCanvasEventPosition(eventData: any): CanvasWhiteboardPoint {\n        let canvasBoundingRect = this.context.canvas.getBoundingClientRect();\n\n        let hasTouches = (eventData.touches && eventData.touches.length) ? eventData.touches[0] : null;\n        if (!hasTouches)\n            hasTouches = (eventData.changedTouches && eventData.changedTouches.length) ? eventData.changedTouches[0] : null;\n\n        let event = hasTouches ? hasTouches : eventData;\n\n        const scaleWidth = canvasBoundingRect.width / this.context.canvas.width;\n        const scaleHeight = canvasBoundingRect.height / this.context.canvas.height;\n\n        let xPosition = (event.clientX - canvasBoundingRect.left);\n        let yPosition = (event.clientY - canvasBoundingRect.top);\n\n        xPosition /= this.scaleFactor ? this.scaleFactor : scaleWidth;\n        yPosition /= this.scaleFactor ? this.scaleFactor : scaleHeight;\n\n        return new CanvasWhiteboardPoint(xPosition / this.context.canvas.width, yPosition / this.context.canvas.height);\n    }\n\n    /**\n     * The update coordinates on the canvas are mapped so that all receiving ends\n     * can reverse the mapping and get the same position as the one that\n     * was drawn on this update.\n     *\n     * @param update The CanvasWhiteboardUpdate object.\n     */\n    private _prepareToSendUpdate(update: CanvasWhiteboardUpdate): void {\n        this._prepareUpdateForBatchDispatch(update);\n    }\n\n\n    /**\n     * Catches the Key Up events made on the canvas.\n     * If the ctrlKey or commandKey(macOS) was held and the keyCode is 90 (z), an undo action will be performed\n     * If the ctrlKey or commandKey(macOS) was held and the keyCode is 89 (y), a redo action will be performed\n     * If the ctrlKey or commandKey(macOS) was held and the keyCode is 83 (s) or 115(S), a save action will be performed\n     *\n     * @param event The event that occurred.\n     */\n    private _canvasKeyDown(event: any): void {\n        if (event.ctrlKey || event.metaKey) {\n            if (event.keyCode === 90 && this.undoButtonEnabled) {\n                event.preventDefault();\n                this.undo();\n            }\n            if (event.keyCode === 89 && this.redoButtonEnabled) {\n                event.preventDefault();\n                this.redo();\n            }\n            if (event.keyCode === 83 || event.keyCode === 115) {\n                event.preventDefault();\n                this.saveLocal();\n            }\n        }\n    }\n\n    /**\n     * On window resize, recalculate the canvas dimensions and redraw the history\n     */\n    private _redrawCanvasOnResize(): void {\n        this._calculateCanvasWidthAndHeight();\n        this._redrawHistory();\n    }\n\n    /**\n     * Redraw the saved history after resetting the canvas state\n     */\n    private _redrawHistory(): void {\n        let updatesToDraw = [].concat(this._updateHistory);\n\n        this._removeCanvasData(() => {\n            updatesToDraw.forEach((update: CanvasWhiteboardUpdate) => {\n                this._draw(update);\n            });\n        });\n    }\n\n    /**\n     * Draws a CanvasWhiteboardUpdate object on the canvas.\n     * The coordinates are first reverse mapped so that they can be drawn in the proper place. The update\n     * is afterwards added to the undoStack so that it can be\n     *\n     * If the CanvasWhiteboardUpdate Type is \"start\", a new \"selectedShape\" is created.\n     * If the CanvasWhiteboardUpdate Type is \"drag\", the shape is taken from the shapesMap and then it's updated.\n     * Afterwards the context is used to draw the shape on the canvas.\n     * This function saves the last X and Y coordinates that were drawn.\n     *\n     * @param update The update object.\n     */\n    private _draw(update: CanvasWhiteboardUpdate): void {\n        this._updateHistory.push(update);\n\n        //map the canvas coordinates to our canvas size since they are scaled.\n        update = Object.assign(new CanvasWhiteboardUpdate(),\n            update,\n            {\n                x: update.x * this.context.canvas.width,\n                y: update.y * this.context.canvas.height\n            });\n\n        if (update.type === CanvasWhiteboardUpdateType.START) {\n            let updateShapeConstructor = this._canvasWhiteboardShapeService.getShapeConstructorFromShapeName(update.selectedShape);\n            let shape = new updateShapeConstructor(\n                new CanvasWhiteboardPoint(update.x, update.y),\n                Object.assign(new CanvasWhiteboardShapeOptions(), update.selectedShapeOptions)\n            );\n            this._incompleteShapesMap.set(update.UUID, shape);\n            this._drawIncompleteShapes();\n        } else if (update.type === CanvasWhiteboardUpdateType.DRAG) {\n            let shape = this._incompleteShapesMap.get(update.UUID);\n            shape && shape.onUpdateReceived(update);\n            this._drawIncompleteShapes();\n        } else if (CanvasWhiteboardUpdateType.STOP) {\n            let shape = this._incompleteShapesMap.get(update.UUID);\n            shape && shape.onStopReceived(update);\n\n            this._shapesMap.set(update.UUID, shape);\n            this._incompleteShapesMap.delete(update.UUID);\n            this._swapCompletedShapeToActualCanvas(shape);\n        }\n    }\n\n    private _drawIncompleteShapes() {\n        this._resetIncompleteShapeCanvas();\n        this._incompleteShapesMap.forEach((shape) => {\n            if (shape.isVisible) {\n                shape.draw(this._incompleteShapesCanvasContext);\n            }\n        });\n    }\n\n    private _swapCompletedShapeToActualCanvas(shape: CanvasWhiteboardShape) {\n        this._drawIncompleteShapes();\n        if (shape.isVisible) {\n            shape.draw(this.context);\n        }\n    }\n\n    private _resetIncompleteShapeCanvas() {\n        this._incompleteShapesCanvasContext.clearRect(0, 0, this._incompleteShapesCanvasContext.canvas.width, this._incompleteShapesCanvasContext.canvas.height);\n        this._incompleteShapesCanvasContext.fillStyle = \"transparent\";\n        this._incompleteShapesCanvasContext.fillRect(0, 0, this._incompleteShapesCanvasContext.canvas.width, this._incompleteShapesCanvasContext.canvas.height);\n    }\n\n    /**\n     * Delete everything from the screen, redraw the background, and then redraw all the shapes from the shapesMap\n     */\n    drawAllShapes() {\n        this._redrawBackground(() => {\n            this._shapesMap.forEach((shape: CanvasWhiteboardShape) => {\n                if (shape.isVisible) {\n                    shape.draw(this.context);\n                }\n            });\n        });\n    }\n\n    private _addCurrentShapeDataToAnUpdate(update: CanvasWhiteboardUpdate) {\n        if (!update.selectedShape) {\n            update.selectedShape = (new this.selectedShapeConstructor).getShapeName();\n        }\n\n        if (!update.selectedShapeOptions) {\n            //Make a deep copy since we don't want some Shape implementation to change something by accident\n            update.selectedShapeOptions = Object.assign(new CanvasWhiteboardShapeOptions(), this.generateShapePreviewOptions(), {lineWidth: this.lineWidth});\n        }\n    }\n\n    generateShapePreviewOptions(): CanvasWhiteboardShapeOptions {\n        return Object.assign(new CanvasWhiteboardShapeOptions(),\n            {\n                shouldFillShape: !!this.fillColor,\n                fillStyle: this.fillColor,\n                strokeStyle: this.strokeColor,\n                lineWidth: 2,\n                lineJoin: this.lineJoin,\n                lineCap: this.lineCap\n            });\n    }\n\n    /**\n     * Sends the update to all receiving ends as an Event emit. This is done as a batch operation (meaning\n     * multiple updates are sent at the same time). If this method is called, after 100 ms all updates\n     * that were made at that time will be packed up together and sent to the receiver.\n     *\n     * @param update The update object.\n     * @return Emits an Array of Updates when the batch.\n     */\n    private _prepareUpdateForBatchDispatch(update: CanvasWhiteboardUpdate): void {\n        this._batchUpdates.push(cloneDeep(update));\n        if (!this._updateTimeout) {\n            this._updateTimeout = setTimeout(() => {\n                this.onBatchUpdate.emit(this._batchUpdates);\n                this._batchUpdates = [];\n                this._updateTimeout = null;\n            }, this.batchUpdateTimeoutDuration);\n        }\n    };\n\n    /**\n     * Draws an Array of Updates on the canvas.\n     *\n     * @param updates The array with Updates.\n     */\n    drawUpdates(updates: CanvasWhiteboardUpdate[]): void {\n        if (this._canDraw) {\n            this._drawMissingUpdates();\n            updates.forEach((update: CanvasWhiteboardUpdate) => {\n                this._draw(update);\n            });\n        } else {\n            this._updatesNotDrawn = this._updatesNotDrawn.concat(updates);\n        }\n    };\n\n    /**\n     * Draw any missing updates that were received before the image was loaded\n     */\n    private _drawMissingUpdates(): void {\n        if (this._updatesNotDrawn.length > 0) {\n            let updatesToDraw = this._updatesNotDrawn;\n            this._updatesNotDrawn = [];\n\n            updatesToDraw.forEach((update: CanvasWhiteboardUpdate) => {\n                this._draw(update);\n            });\n        }\n    }\n\n    /**\n     * Draws an image on the canvas\n     *\n     * @param context The context used to draw the image on the canvas.\n     * @param image The image to draw.\n     * @param x The X coordinate for the starting draw position.\n     * @param y The Y coordinate for the starting draw position.\n     * @param width The width of the image that will be drawn.\n     * @param height The height of the image that will be drawn.\n     * @param offsetX The offsetX if the image size is larger than the canvas (aspect Ratio)\n     * @param offsetY The offsetY if the image size is larger than the canvas (aspect Ratio)\n     */\n    private _drawImage(context: any, image: any, x: number, y: number, width: number, height: number, offsetX: number, offsetY: number): void {\n        if (arguments.length === 2) {\n            x = y = 0;\n            width = context.canvas.width;\n            height = context.canvas.height;\n        }\n\n        offsetX = typeof offsetX === 'number' ? offsetX : 0.5;\n        offsetY = typeof offsetY === 'number' ? offsetY : 0.5;\n\n        if (offsetX < 0) offsetX = 0;\n        if (offsetY < 0) offsetY = 0;\n        if (offsetX > 1) offsetX = 1;\n        if (offsetY > 1) offsetY = 1;\n\n        let imageWidth = image.width;\n        let imageHeight = image.height;\n        let radius = Math.min(width / imageWidth, height / imageHeight);\n        let newWidth = imageWidth * radius;\n        let newHeight = imageHeight * radius;\n        let finalDrawX: any;\n        let finalDrawY: any;\n        let finalDrawWidth: any;\n        let finalDrawHeight: any;\n        let aspectRatio = 1;\n\n        // decide which gap to fill\n        if (newWidth < width) aspectRatio = width / newWidth;\n        if (Math.abs(aspectRatio - 1) < 1e-14 && newHeight < height) aspectRatio = height / newHeight;\n        newWidth *= aspectRatio;\n        newHeight *= aspectRatio;\n\n        // calculate source rectangle\n        finalDrawWidth = imageWidth / (newWidth / width);\n        finalDrawHeight = imageHeight / (newHeight / height);\n\n        finalDrawX = (imageWidth - finalDrawWidth) * offsetX;\n        finalDrawY = (imageHeight - finalDrawHeight) * offsetY;\n\n        // make sure the source rectangle is valid\n        if (finalDrawX < 0) finalDrawX = 0;\n        if (finalDrawY < 0) finalDrawY = 0;\n        if (finalDrawWidth > imageWidth) finalDrawWidth = imageWidth;\n        if (finalDrawHeight > imageHeight) finalDrawHeight = imageHeight;\n\n        // fill the image in destination rectangle\n        context.drawImage(image, finalDrawX, finalDrawY, finalDrawWidth, finalDrawHeight, x, y, width, height);\n    }\n\n    /**\n     * The HTMLCanvasElement.toDataURL() method returns a data URI containing a representation of the image in the format specified by the type parameter (defaults to PNG).\n     * The returned image is in a resolution of 96 dpi.\n     * If the height or width of the canvas is 0, the string \"data:,\" is returned.\n     * If the requested type is not image/png, but the returned value starts with data:image/png, then the requested type is not supported.\n     * Chrome also supports the image/webp type.\n     *\n     * @param returnedDataType A DOMString indicating the image format. The default format type is image/png.\n     * @param returnedDataQuality A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp.\n     If this argument is anything else, the default value for image quality is used. The default value is 0.92. Other arguments are ignored.\n     */\n    generateCanvasDataUrl(returnedDataType: string = \"image/png\", returnedDataQuality: number = 1): string {\n        return this.context.canvas.toDataURL(returnedDataType, returnedDataQuality);\n    }\n\n    /**\n     * Generate a Blob object representing the content drawn on the canvas.\n     * This file may be cached on the disk or stored in memory at the discretion of the user agent.\n     * If type is not specified, the image type is image/png. The created image is in a resolution of 96dpi.\n     * The third argument is used with image/jpeg images to specify the quality of the output.\n     *\n     * @param callbackFn The function that should be executed when the blob is created. Should accept a parameter Blob (for the result).\n     * @param returnedDataType A DOMString indicating the image format. The default type is image/png.\n     * @param returnedDataQuality A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp.\n     If this argument is anything else, the default value for image quality is used. Other arguments are ignored.\n     */\n    generateCanvasBlob(callbackFn: any, returnedDataType: string = \"image/png\", returnedDataQuality: number = 1): void {\n        let toBlobMethod: Function;\n\n        if (typeof this.context.canvas.toBlob !== \"undefined\") {\n            toBlobMethod = this.context.canvas.toBlob.bind(this.context.canvas);\n        } else if (typeof this.context.canvas.msToBlob !== \"undefined\") {\n            toBlobMethod = (callback) => {\n                callback && callback(this.context.canvas.msToBlob());\n            };\n        }\n\n        toBlobMethod && toBlobMethod((blob: Blob) => {\n            callbackFn && callbackFn(blob, returnedDataType);\n        }, returnedDataType, returnedDataQuality);\n    }\n\n    /**\n     * Generate a canvas image representation and download it locally\n     * The name of the image is canvas_drawing_ + the current local Date and Time the image was created\n     * Methods for standalone creation of the images in this method are left here for backwards compatibility\n     *\n     * @param returnedDataType A DOMString indicating the image format. The default type is image/png.\n     * @param downloadData? The created string or Blob (IE).\n     * @param customFileName? The name of the file that should be downloaded\n     */\n    downloadCanvasImage(returnedDataType: string = \"image/png\", downloadData?: string | Blob, customFileName?: string): void {\n        if (window.navigator.msSaveOrOpenBlob === undefined) {\n            let downloadLink = document.createElement('a');\n            downloadLink.setAttribute('href', downloadData ? <string>downloadData : this.generateCanvasDataUrl(returnedDataType));\n\n            let fileName = customFileName ? customFileName\n                : (this.downloadedFileName ? this.downloadedFileName : \"canvas_drawing_\" + new Date().valueOf());\n\n            downloadLink.setAttribute('download', fileName + this._generateDataTypeString(returnedDataType));\n            document.body.appendChild(downloadLink);\n            downloadLink.click();\n            document.body.removeChild(downloadLink);\n        } else {\n            // IE-specific code\n            if (downloadData) {\n                this._saveCanvasBlob(<Blob>downloadData, returnedDataType);\n            } else {\n                this.generateCanvasBlob(this._saveCanvasBlob.bind(this), returnedDataType);\n            }\n        }\n    }\n\n    /**\n     * Save the canvas blob (IE) locally\n     * @param blob\n     * @param returnedDataType\n     */\n    private _saveCanvasBlob(blob: Blob, returnedDataType: string = \"image/png\"): void {\n        window.navigator.msSaveOrOpenBlob(blob, \"canvas_drawing_\" + new Date().valueOf() + this._generateDataTypeString(returnedDataType));\n    }\n\n    /**\n     * This method generates a canvas url string or a canvas blob with the presented data type\n     * A callback function is then invoked since the blob creation must be done via a callback\n     *\n     * @param callback\n     * @param returnedDataType\n     * @param returnedDataQuality\n     */\n    generateCanvasData(callback: any, returnedDataType: string = \"image/png\", returnedDataQuality: number = 1): void {\n        if (window.navigator.msSaveOrOpenBlob === undefined) {\n            callback && callback(this.generateCanvasDataUrl(returnedDataType, returnedDataQuality))\n        } else {\n            this.generateCanvasBlob(callback, returnedDataType, returnedDataQuality);\n        }\n    }\n\n    /**\n     * Local method to invoke saving of the canvas data when clicked on the canvas Save button\n     * This method will emit the generated data with the specified Event Emitter\n     *\n     * @param returnedDataType\n     */\n    saveLocal(returnedDataType: string = \"image/png\"): void {\n        this.generateCanvasData((generatedData: string | Blob) => {\n            this.onSave.emit(generatedData);\n\n            if (this.shouldDownloadDrawing) {\n                this.downloadCanvasImage(returnedDataType, generatedData);\n            }\n        });\n    }\n\n    private _generateDataTypeString(returnedDataType: string): string {\n        if (returnedDataType) {\n            return \".\" + returnedDataType.split('/')[1];\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Toggles the color picker window, delegating the showColorPicker Input to the ColorPickerComponent.\n     * If no value is supplied (null/undefined) the current value will be negated and used.\n     * @param value\n     */\n    toggleStrokeColorPicker(value: boolean) {\n        this.showStrokeColorPicker = !this._isNullOrUndefined(value) ? value : !this.showStrokeColorPicker;\n    }\n\n    /**\n     * Toggles the color picker window, delegating the showColorPicker Input to the ColorPickerComponent.\n     * If no value is supplied (null/undefined) the current value will be negated and used.\n     * @param value\n     */\n    toggleFillColorPicker(value: boolean) {\n        this.showFillColorPicker = !this._isNullOrUndefined(value) ? value : !this.showFillColorPicker;\n    }\n\n    /**\n     * Toggles the shape selector window, delegating the showShapeSelector Input to the CanvasWhiteboardShapeSelectorComponent.\n     * If no value is supplied (null/undefined) the current value will be negated and used.\n     * @param value\n     */\n    toggleShapeSelector(value: boolean) {\n        this.showShapeSelector = !this._isNullOrUndefined(value) ? value : !this.showShapeSelector;\n    }\n\n    selectShape(newShapeBlueprint: INewCanvasWhiteboardShape<CanvasWhiteboardShape>) {\n        this.selectedShapeConstructor = newShapeBlueprint;\n    }\n\n    /**\n     * Returns a deep copy of the current drawing history for the canvas.\n     * The deep copy is returned because we don't want anyone to mutate the current history\n     */\n    getDrawingHistory(): CanvasWhiteboardUpdate[] {\n        return cloneDeep(this._updateHistory);\n    }\n\n    /**\n     * Unsubscribe from a given subscription if it is active\n     * @param subscription\n     */\n    private _unsubscribe(subscription: Subscription): void {\n        if (subscription) subscription.unsubscribe();\n    }\n\n    private _generateUUID(): string {\n        return this._random4() + this._random4() + \"-\" + this._random4() + \"-\" + this._random4() + \"-\" +\n            this._random4() + \"-\" + this._random4() + this._random4() + this._random4();\n    }\n\n    private _random4(): string {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    }\n\n    /**\n     * Unsubscribe from the service observables\n     */\n    ngOnDestroy(): void {\n        this._unsubscribe(this._resizeSubscription);\n        this._unsubscribe(this._registeredShapesSubscription);\n        this._canvasWhiteboardServiceSubscriptions.forEach(subscription => this._unsubscribe(subscription));\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output\n} from \"@angular/core\";\nimport {CanvasWhiteboardShapeService, INewCanvasWhiteboardShape} from \"./canvas-whiteboard-shape.service\";\nimport {CanvasWhiteboardShape} from \"./canvas-whiteboard-shape\";\nimport {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\nimport {Observable} from \"rxjs/index\";\n\n@Component({\n    selector: \"canvas-whiteboard-shape-selector\",\n    host: {\n        '(document:mousedown)': 'closeOnExternalClick($event)',\n        '(document:touchstart)': 'closeOnExternalClick($event)',\n    },\n    template: `\n        <div *ngIf=\"!showShapeSelector\" (click)=\"toggleShapeSelector($event)\"\n             class=\"canvas-whiteboard-shape-selector-selected-preview\">\n            <canvas-whiteboard-shape-preview [shapeConstructor]=\"selectedShapeConstructor\"\n                                             [shapeOptions]=\"shapeOptions\"></canvas-whiteboard-shape-preview>\n        </div>\n        <div class=\"canvas-whiteboard-shape-selector-wrapper\" *ngIf=\"showShapeSelector\">\n            <canvas-whiteboard-shape-preview *ngFor=\"let shapeConstructor of registeredShapes$ | async\"\n                                             [shapeConstructor]=\"shapeConstructor\"\n                                             [shapeOptions]=\"shapeOptions\"\n                                             (click)=\"selectShape(shapeConstructor)\"></canvas-whiteboard-shape-preview>\n        </div>\n    `,\n    styles: [`\n        .canvas-whiteboard-shape-selector-selected-preview {\n            vertical-align: bottom;\n            display: inline-block;\n        }\n\n        .canvas-whiteboard-shape-selector-wrapper {\n            display: block;\n            padding: 4px;\n            border: 1px solid #afafaf;\n        }\n\n        @media (min-width: 401px) {\n            .canvas-whiteboard-shape-selector-wrapper {\n            }\n        }\n    `]\n})\nexport class CanvasWhiteboardShapeSelectorComponent {\n    @Input() readonly showShapeSelector: boolean = false;\n    @Input() readonly selectedShapeConstructor: INewCanvasWhiteboardShape<CanvasWhiteboardShape>;\n    @Input() readonly shapeOptions: CanvasWhiteboardShapeOptions;\n\n    @Output() onToggleShapeSelector = new EventEmitter<boolean>();\n    @Output() onShapeSelected = new EventEmitter<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>();\n\n    registeredShapes$: Observable<INewCanvasWhiteboardShape<CanvasWhiteboardShape>[]>;\n\n    constructor(private _elementRef: ElementRef,\n                private _canvasWhiteboardShapeService: CanvasWhiteboardShapeService) {\n        this.registeredShapes$ = this._canvasWhiteboardShapeService.registeredShapes$;\n    }\n\n    selectShape(shape: INewCanvasWhiteboardShape<CanvasWhiteboardShape>) {\n        this.onShapeSelected.emit(shape);\n        this.toggleShapeSelector(null);\n    }\n\n    closeOnExternalClick(event) {\n        if (!this._elementRef.nativeElement.contains(event.target) && this.showShapeSelector) {\n            this.onToggleShapeSelector.emit(false);\n        }\n    }\n\n    toggleShapeSelector(event: Event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        this.onToggleShapeSelector.emit(!this.showShapeSelector);\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter, OnInit, ViewChild, ElementRef, Input\n} from '@angular/core';\n\n@Component({\n    selector: 'canvas-whiteboard-colorpicker',\n    host: {\n        '(document:mousedown)': 'closeOnExternalClick($event)',\n        '(document:touchstart)': 'closeOnExternalClick($event)',\n    },\n    template: `\n        <div [hidden]=\"showColorPicker\" class=\"canvas-whiteboard-colorpicker-input\"\n               (click)=\"toggleColorPicker($event)\">\n               <div class=\"selected-color-type-wrapper\">{{previewText}}</div>\n               <div class=\"selected-color-preview\" [style.background]=\"selectedColor\"></div>\n        </div>\n        <div [hidden]=\"!showColorPicker\" class=\"canvas-whiteboard-colorpicker-wrapper\">\n            <div (click)=\"selectColor('transparent')\" class=\"transparent-color\">Transparent</div>\n            <canvas #canvaswhiteboardcolorpicker class=\"canvas-whiteboard-colorpicker\" width=\"284\" height=\"155\"\n                    (click)=\"selectColor(determineColorFromCanvas($event))\"></canvas>\n        </div>\n    `,\n    styles: [`\n        .selected-color-preview {\n            width: 100%;\n            height: 20%;\n            position: absolute;\n            bottom: 0;\n            left: 0;\n        }\n        \n        .selected-color-type-wrapper {\n            display: inline-block;\n            height: 100%;\n            width: 100%;\n            text-align: center;\n            font-size: 14px;\n            color: #000;\n        }\n        \n        .transparent-color {\n            font-size: 14px;\n        }\n        \n        .canvas-whiteboard-colorpicker-wrapper {\n            border: 1px solid #afafaf;\n            color: #000;\n        }\n\n        @media (min-width: 401px) {\n            .canvas-whiteboard-colorpicker-wrapper {\n                position: absolute;\n            }\n        }\n\n        .canvas-whiteboard-colorpicker-input {\n            display: inline-block;\n            position:relative;\n            width: 44px;\n            height: 44px;\n            margin: 5px;\n            cursor: pointer;\n            color: #000;\n        }\n    `]\n})\nexport class CanvasWhiteboardColorPickerComponent implements OnInit {\n\n    @Input() previewText: string;\n    @Input() readonly selectedColor: string = 'rgba(0,0,0,1)';\n    @ViewChild('canvaswhiteboardcolorpicker') canvas: ElementRef;\n\n    @Input() readonly showColorPicker: boolean = false;\n    private _context: CanvasRenderingContext2D;\n\n    @Output() onToggleColorPicker = new EventEmitter<boolean>();\n    @Output() onColorSelected = new EventEmitter<string>();\n    @Output() onSecondaryColorSelected = new EventEmitter<string>();\n\n    constructor(private _elementRef: ElementRef) {\n    }\n\n    /**\n     * Initialize the canvas drawing context. If we have an aspect ratio set up, the canvas will resize\n     * according to the aspect ratio.\n     */\n    ngOnInit() {\n        this._context = this.canvas.nativeElement.getContext(\"2d\");\n        this.createColorPalette();\n    }\n\n    createColorPalette() {\n        let gradient = this._context.createLinearGradient(0, 0, this._context.canvas.width, 0);\n        gradient.addColorStop(0, \"rgb(255, 0, 0)\");\n        gradient.addColorStop(0.15, \"rgb(255, 0, 255)\");\n        gradient.addColorStop(0.33, \"rgb(0, 0, 255)\");\n        gradient.addColorStop(0.49, \"rgb(0, 255, 255)\");\n        gradient.addColorStop(0.67, \"rgb(0, 255, 0)\");\n        gradient.addColorStop(0.84, \"rgb(255, 255, 0)\");\n        gradient.addColorStop(1, \"rgb(255, 0, 0)\");\n        this._context.fillStyle = gradient;\n        this._context.fillRect(0, 0, this._context.canvas.width, this._context.canvas.height);\n\n        gradient = this._context.createLinearGradient(0, 0, 0, this._context.canvas.height);\n        gradient.addColorStop(0, \"rgba(255, 255, 255, 1)\");\n        gradient.addColorStop(0.5, \"rgba(255, 255, 255, 0)\");\n        gradient.addColorStop(0.5, \"rgba(0, 0, 0, 0)\");\n        gradient.addColorStop(1, \"rgba(0, 0, 0, 1)\");\n        this._context.fillStyle = gradient;\n        this._context.fillRect(0, 0, this._context.canvas.width, this._context.canvas.height);\n    }\n\n    closeOnExternalClick(event) {\n        if (!this._elementRef.nativeElement.contains(event.target) && this.showColorPicker) {\n            this.onToggleColorPicker.emit(false);\n        }\n    }\n\n    toggleColorPicker(event: Event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        this.onToggleColorPicker.emit(!this.showColorPicker);\n    }\n\n    determineColorFromCanvas(event: any) {\n        let canvasRect = this._context.canvas.getBoundingClientRect();\n        let imageData = this._context.getImageData(event.clientX - canvasRect.left, event.clientY - canvasRect.top, 1, 1);\n\n        return `rgba(${imageData.data[0]}, ${imageData.data[1]}, ${imageData.data[2]}, ${imageData.data[3]})`;\n    }\n\n    selectColor(color: string) {\n        this.onColorSelected.emit(color);\n        this.toggleColorPicker(null);\n    }\n}","import {\n    Component,\n    ElementRef,\n    Input,\n    ViewChild,\n    AfterViewInit,\n    OnChanges,\n    SimpleChanges\n} from \"@angular/core\";\nimport {INewCanvasWhiteboardShape} from \"./canvas-whiteboard-shape.service\";\nimport {CanvasWhiteboardShape} from \"./canvas-whiteboard-shape\";\nimport {CanvasWhiteboardPoint} from \"../canvas-whiteboard-point\";\nimport {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\n\n@Component({\n    selector: \"canvas-whiteboard-shape-preview\",\n    template: `\n        <canvas #canvasWhiteboardShapePreview width=\"50px\" height=\"50px\"\n                class=\"canvas-whiteboard-shape-preview-canvas\"></canvas>\n    `,\n    styles: [`\n        .canvas-whiteboard-shape-preview-canvas {\n            cursor: pointer;\n        }\n    `]\n})\nexport class CanvasWhiteboardShapePreviewComponent implements AfterViewInit, OnChanges {\n    @Input() readonly shapeConstructor: INewCanvasWhiteboardShape<CanvasWhiteboardShape>;\n    @Input() readonly shapeOptions: CanvasWhiteboardShapeOptions;\n\n    @ViewChild('canvasWhiteboardShapePreview') canvas: ElementRef;\n\n    ngAfterViewInit() {\n        this.drawShapePreview();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.shapeConstructor || changes.shapeOptions) {\n            this.drawShapePreview();\n        }\n    }\n\n    drawShapePreview() {\n        if (!this.canvas) { return; }\n\n        let context: CanvasRenderingContext2D = this.canvas.nativeElement.getContext(\"2d\");\n        context.clearRect(0, 0, context.canvas.width, context.canvas.height);\n\n        let concreteShape = new this.shapeConstructor(\n            new CanvasWhiteboardPoint(0, 0),\n            Object.assign(new CanvasWhiteboardShapeOptions(), this.shapeOptions)\n        );\n\n        concreteShape.drawPreview(context);\n    }\n}\n","import {NgModule} from \"@angular/core\";\nimport {CanvasWhiteboardComponent} from \"./canvas-whiteboard.component\";\nimport {CommonModule} from \"@angular/common\";\nimport {CanvasWhiteboardColorPickerComponent} from \"./canvas-whiteboard-colorpicker.component\";\nimport {CanvasWhiteboardService} from \"./canvas-whiteboard.service\";\nimport {CanvasWhiteboardShapeService} from \"./shapes/canvas-whiteboard-shape.service\";\nimport {CanvasWhiteboardShapeSelectorComponent} from \"./shapes/canvas-whiteboard-shape-selector.component\";\nimport {CanvasWhiteboardShapePreviewComponent} from \"./shapes/canvas-whiteboard-shape-preview.component\";\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        CanvasWhiteboardComponent,\n        CanvasWhiteboardColorPickerComponent,\n        CanvasWhiteboardShapeSelectorComponent,\n        CanvasWhiteboardShapePreviewComponent\n    ],\n    providers: [\n        CanvasWhiteboardService,\n        CanvasWhiteboardShapeService\n    ],\n    exports: [CanvasWhiteboardComponent]\n})\nexport class CanvasWhiteboardModule {\n}\n","import {CanvasWhiteboardShapeOptions} from \"./shapes/canvas-whiteboard-shape-options\";\n\nexport enum CanvasWhiteboardUpdateType {\n    START = 0,\n    DRAG = 1,\n    STOP = 2\n}\n\nexport class CanvasWhiteboardUpdate {\n    x: number;\n    y: number;\n    type: CanvasWhiteboardUpdateType;\n    UUID: string;\n\n    selectedShape: string;\n    selectedShapeOptions: CanvasWhiteboardShapeOptions;\n\n    static deserializeJson(json: any): CanvasWhiteboardUpdate {\n        let parsedJson;\n        try {\n            parsedJson = JSON.parse(json);\n            return new CanvasWhiteboardUpdate(\n                parsedJson['x'],\n                parsedJson['y'],\n                parsedJson['type'],\n                parsedJson['uuid'],\n                parsedJson['selectedShape'],\n                parsedJson['selectedShapeOptions']);\n        } catch (e) {\n            console.error(\"The canvas whiteboard update is not p1\" +\n                \"arseable\");\n            return null;\n        }\n    }\n\n    constructor(x?: number,\n                y?: number,\n                type?: CanvasWhiteboardUpdateType,\n                UUID?: string,\n                selectedShape?: string,\n                selectedShapeOptions?: CanvasWhiteboardShapeOptions) {\n        this.x = x;\n        this.y = y;\n        this.type = type;\n        this.UUID = UUID;\n        this.selectedShape = selectedShape;\n        this.selectedShapeOptions = selectedShapeOptions;\n    }\n\n    stringify(): string {\n        let objectToSerialize = {\n            x: this.x.toFixed(3),\n            y: this.y.toFixed(3),\n            type: this.type,\n            uuid: this.UUID,\n            selectedShape: this.selectedShape\n        };\n\n        if (this.selectedShapeOptions) {\n            objectToSerialize[\"selectedShapeOptions\"] = this.selectedShapeOptions;\n        }\n\n        return JSON.stringify(objectToSerialize);\n    }\n}\n","export const DEFAULT_STYLES = `\n.canvas_whiteboard_button {\n    display: inline-block;\n    outline: 0px;\n    padding-top: 7px;\n    margin-bottom: 0;\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 1.42857143;\n    text-align: center;\n    white-space: nowrap;\n    vertical-align: middle;\n    -ms-touch-action: manipulation;\n    touch-action: manipulation;\n    cursor: pointer;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    background-image: none;\n    border: 1px solid transparent;\n    border-radius: 4px;\n}\n\n.canvas_whiteboard_buttons { \n    z-index: 3;\n}\n\n@media (max-width: 400px) {\n     .canvas_whiteboard_buttons {\n            position: absolute;\n            z-inde\n            top: 0;\n            width: 100%;\n            text-align: center;\n      }\n}\n        \n@media (min-width: 401px) { \n    .canvas_whiteboard_buttons {\n        position: absolute;\n        right: 0%;\n        color: #fff;\n    }\n}\n\n.canvas_whiteboard_buttons {\n    padding: 5px;\n}\n\n.canvas_whiteboard_buttons > button {\n    margin: 5px;\n}\n\n.canvas_whiteboard_button-draw_animated {\n    -webkit-animation: pulsate 1s ease-out;\n    -webkit-animation-iteration-count: infinite;\n}\n\n@-webkit-keyframes pulsate {\n    0% {\n        -webkit-transform: scale(0.1, 0.1);\n        opacity: 0.0;\n    }\n    50% {\n        opacity: 1.0;\n    }\n    100% {\n        -webkit-transform: scale(1.2, 1.2);\n        opacity: 0.0;\n    }\n}\n.canvas_wrapper_div {\n    width: 100%;\n    height: 100%;\n    border: 0.5px solid #e2e2e2;\n}\n\n.canvas_whiteboard_button-clear {\n    padding-top: 5px;\n}\n\n.canvas_whiteboard {\n    position: absolute;\n    z-index: 1;\n}\n\n.incomplete_shapes_canvas_whiteboard {\n    position: absolute;\n    z-index: 2;\n}\n\n`;","import {CanvasWhiteboardUpdate} from \"./canvas-whiteboard-update.model\";\nimport {Observable, Subject} from \"rxjs/index\";\n\nexport class CanvasWhiteboardService {\n    private _canvasDrawSubject: Subject<CanvasWhiteboardUpdate[]> = new Subject();\n    canvasDrawSubject$: Observable<CanvasWhiteboardUpdate[]> = this._canvasDrawSubject.asObservable();\n\n    private _canvasClearSubject: Subject<any> = new Subject();\n    canvasClearSubject$: Observable<any> = this._canvasClearSubject.asObservable();\n\n    private _canvasUndoSubject: Subject<any> = new Subject();\n    canvasUndoSubject$: Observable<any> = this._canvasUndoSubject.asObservable();\n\n    private _canvasRedoSubject: Subject<any> = new Subject();\n    canvasRedoSubject$: Observable<any> = this._canvasRedoSubject.asObservable();\n\n    public drawCanvas(updates: CanvasWhiteboardUpdate[]): void {\n        this._canvasDrawSubject.next(updates);\n    }\n\n    public clearCanvas(): void {\n        this._canvasClearSubject.next();\n    }\n\n    public undoCanvas(updateUUD: string): void {\n        this._canvasUndoSubject.next(updateUUD);\n    }\n\n    public redoCanvas(updateUUD: string): void {\n        this._canvasRedoSubject.next(updateUUD);\n    }\n}\n","export class CanvasWhiteboardPoint {\n    x: number;\n    y: number;\n\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n}","export class CanvasWhiteboardShapeOptions {\n    shouldFillShape?: boolean;\n    fillStyle?: string;\n    strokeStyle?: string;\n    lineWidth?: number;\n    lineJoin?: string;\n    lineCap?: string;\n\n    constructor() {\n        this.shouldFillShape = false;\n        this.fillStyle = null;\n        this.strokeStyle = \"rgba(0,0,0,1)\";\n        this.lineWidth = 2;\n        this.lineJoin = \"round\";\n        this.lineCap = \"round\";\n    }\n}\n","import {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\nimport {CanvasWhiteboardPoint} from \"../canvas-whiteboard-point\";\nimport {CanvasWhiteboardUpdate} from \"../canvas-whiteboard-update.model\";\n\nexport abstract class CanvasWhiteboardShape {\n    isVisible: boolean;\n    protected positionPoint: CanvasWhiteboardPoint;\n    protected options: CanvasWhiteboardShapeOptions;\n\n    constructor(positionPoint?: CanvasWhiteboardPoint, options?: CanvasWhiteboardShapeOptions) {\n        this.positionPoint = positionPoint || new CanvasWhiteboardPoint(0, 0);\n        this.options = options || new CanvasWhiteboardShapeOptions();\n        this.isVisible = true;\n    }\n\n    abstract getShapeName(): string;\n\n    abstract onUpdateReceived(update: CanvasWhiteboardUpdate);\n\n    // noinspection TsLint\n    onStopReceived(update: CanvasWhiteboardUpdate) {\n    }\n\n    abstract draw(context: CanvasRenderingContext2D);\n\n    abstract drawPreview(context: CanvasRenderingContext2D);\n}","import {CanvasWhiteboardShape} from \"./canvas-whiteboard-shape\";\nimport {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\nimport {CanvasWhiteboardPoint} from \"../canvas-whiteboard-point\";\nimport {CanvasWhiteboardUpdate} from \"../canvas-whiteboard-update.model\";\n\nexport class CircleShape extends CanvasWhiteboardShape {\n    radius: number;\n\n    constructor(positionPoint?: CanvasWhiteboardPoint, options?: CanvasWhiteboardShapeOptions, radius?: number) {\n        super(positionPoint, options);\n        this.radius = radius || 0;\n    }\n\n    getShapeName(): string {\n        return 'CircleShape';\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        context.beginPath();\n        context.arc(this.positionPoint.x, this.positionPoint.y, this.radius, 0, Math.PI * 2, false);\n\n        Object.assign(context, this.options);\n\n        context.stroke();\n        if (this.options.shouldFillShape) {\n            context.fill();\n        }\n\n        context.closePath();\n    }\n\n    drawPreview(context: CanvasRenderingContext2D) {\n        this.positionPoint = new CanvasWhiteboardPoint(context.canvas.width / 2, context.canvas.height / 2);\n        this.radius = this.calculateRadius(context.canvas.width - 2, context.canvas.height / 2);\n        this.draw(context);\n    }\n\n    onUpdateReceived(update: CanvasWhiteboardUpdate) {\n        this.radius = this.calculateRadius(update.x, update.y);\n    }\n\n    calculateRadius(x: number, y: number): number {\n        return Math.sqrt(Math.pow(x - this.positionPoint.x, 2) + Math.pow(y - this.positionPoint.y, 2));\n    }\n}\n","import {CanvasWhiteboardShape} from \"./canvas-whiteboard-shape\";\nimport {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\nimport {CanvasWhiteboardPoint} from \"../canvas-whiteboard-point\";\nimport {CanvasWhiteboardUpdate} from \"../canvas-whiteboard-update.model\";\n\nexport class RectangleShape extends CanvasWhiteboardShape {\n    width: number;\n    height: number;\n\n    constructor(positionPoint?: CanvasWhiteboardPoint,\n                options?: CanvasWhiteboardShapeOptions,\n                width?: number,\n                height?: number) {\n        super(positionPoint, options);\n        this.width = width || 0;\n        this.height = height || 0;\n    }\n\n    getShapeName(): string {\n        return 'RectangleShape';\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        if (!this.width || !this.height) {\n            return;\n        }\n        context.beginPath();\n\n        Object.assign(context, this.options);\n\n        context.rect(this.positionPoint.x, this.positionPoint.y, this.width, this.height);\n\n        context.stroke();\n        if (this.options.shouldFillShape) {\n            context.fill();\n        }\n\n        context.closePath();\n    }\n\n    drawPreview(context: CanvasRenderingContext2D) {\n        this.positionPoint = new CanvasWhiteboardPoint(2, 2);\n        this.width = context.canvas.width - 4;\n        this.height = context.canvas.height - 4;\n        this.draw(context);\n    }\n\n    onUpdateReceived(update: CanvasWhiteboardUpdate) {\n        this.width = update.x - this.positionPoint.x;\n        this.height = update.y - this.positionPoint.y;\n    }\n}\n","import {CanvasWhiteboardShape} from \"./canvas-whiteboard-shape\";\nimport {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\nimport {CanvasWhiteboardPoint} from \"../canvas-whiteboard-point\";\nimport {CanvasWhiteboardUpdate} from \"../canvas-whiteboard-update.model\";\n\nexport class FreeHandShape extends CanvasWhiteboardShape {\n    linePositions: CanvasWhiteboardPoint[];\n\n    constructor(positionPoint?: CanvasWhiteboardPoint, options?: CanvasWhiteboardShapeOptions) {\n        super(positionPoint, options);\n        this.linePositions = [];\n    }\n\n    getShapeName(): string {\n        return 'FreeHandShape';\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        Object.assign(context, this.options);\n\n        context.beginPath();\n        context.moveTo(this.positionPoint.x, this.positionPoint.y);\n        // Draw a dot\n        context.lineTo(this.positionPoint.x + 1, this.positionPoint.y + 1);\n\n        // Normal fastest free hand drawing\n        // this.linePositions.forEach((linePosition) => {\n        //     context.lineTo(linePosition.x, linePosition.y);\n        // });\n\n        // Quadratic curves drawing\n        let i = 0;\n        while (i < this.linePositions.length) {\n            if (this.linePositions.length - i > 2) {\n                let controlPoint1 = this.linePositions[i];\n                let controlPoint2 = this.linePositions[i + 1];\n                let endPoint = this.linePositions[i + 2];\n                context.bezierCurveTo(controlPoint1.x,\n                    controlPoint1.y,\n                    controlPoint2.x,\n                    controlPoint2.y,\n                    endPoint.x,\n                    endPoint.y);\n                i += 2;\n            } else {\n                let linePosition = this.linePositions[i];\n                context.lineTo(linePosition.x, linePosition.y);\n                i += 1;\n            }\n        }\n\n        context.stroke();\n    }\n\n    drawPreview(context: CanvasRenderingContext2D) {\n        this.positionPoint = new CanvasWhiteboardPoint(2, 2);\n        this.linePositions = [\n            new CanvasWhiteboardPoint(context.canvas.width - 5, context.canvas.height * 0.3),\n            // new CanvasWhiteboardPoint(context.canvas.width * 0.4, context.canvas.height * 0.6),\n            new CanvasWhiteboardPoint(context.canvas.width * 0.2, context.canvas.height * 0.4),\n            new CanvasWhiteboardPoint(context.canvas.width * 0.6, context.canvas.height * 0.8),\n            new CanvasWhiteboardPoint(context.canvas.width, context.canvas.height)\n        ];\n\n        this.draw(context);\n    }\n\n    onUpdateReceived(update: CanvasWhiteboardUpdate) {\n        this.linePositions.push(new CanvasWhiteboardPoint(update.x, update.y));\n    }\n}\n","import {CanvasWhiteboardShape} from \"./canvas-whiteboard-shape\";\nimport {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\nimport {CanvasWhiteboardPoint} from \"../canvas-whiteboard-point\";\nimport {CanvasWhiteboardUpdate} from \"../canvas-whiteboard-update.model\";\n\nexport class SmileyShape extends CanvasWhiteboardShape {\n    radius: number;\n\n    constructor(positionPoint?: CanvasWhiteboardPoint, options?: CanvasWhiteboardShapeOptions, radius?: number) {\n        super(positionPoint, options);\n        this.options.shouldFillShape = true;\n        this.options.fillStyle = this.options.fillStyle || \"yellow\";\n\n        this.radius = radius || 0;\n    }\n\n    getShapeName(): string {\n        return 'SmileyShape';\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        context.beginPath();\n\n        Object.assign(context, this.options);\n\n        context.arc(this.positionPoint.x, this.positionPoint.y, this.radius, 0, Math.PI * 2, false);\n        context.fill();\n        context.stroke();\n\n        context.beginPath();\n        let leftEyeX = this.positionPoint.x - this.radius * 0.3;\n        let rightEyeX = this.positionPoint.x + this.radius * 0.3;\n        const eyesY = this.positionPoint.y - this.radius * 0.2;\n        const eyeSize = this.radius * 0.1;\n\n        context.arc(leftEyeX, eyesY, eyeSize, 0, 2 * Math.PI, false);\n        context.arc(rightEyeX, eyesY, eyeSize, 0, 2 * Math.PI, false);\n        context.fillStyle = this.options.strokeStyle;\n        context.fill();\n\n        // draw the mouth\n        context.beginPath();\n        context.arc(this.positionPoint.x, this.positionPoint.y, this.radius * 0.7, 0, Math.PI, false);\n        context.stroke();\n\n        context.closePath();\n    }\n\n    drawPreview(context: CanvasRenderingContext2D) {\n        this.positionPoint = new CanvasWhiteboardPoint(context.canvas.width / 2, context.canvas.height / 2);\n        this.radius = this.calculateRadius(context.canvas.width - 2, context.canvas.height / 2);\n        this.draw(context);\n    }\n\n    onUpdateReceived(update: CanvasWhiteboardUpdate) {\n        this.radius = this.calculateRadius(update.x, update.y);\n    }\n\n    calculateRadius(x: number, y: number): number {\n        return Math.sqrt(Math.pow(x - this.positionPoint.x, 2) + Math.pow(y - this.positionPoint.y, 2));\n    }\n}\n","import {CanvasWhiteboardShape} from \"./canvas-whiteboard-shape\";\nimport {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\nimport {CanvasWhiteboardPoint} from \"../canvas-whiteboard-point\";\nimport {CanvasWhiteboardUpdate} from \"../canvas-whiteboard-update.model\";\n\nexport class StarShape extends CanvasWhiteboardShape {\n    radius: number;\n    spikes: number;\n\n    constructor(positionPoint?: CanvasWhiteboardPoint,\n                options?: CanvasWhiteboardShapeOptions,\n                radius?: number,\n                spikes?: number) {\n        super(positionPoint, options);\n        this.radius = radius || 0;\n        this.spikes = spikes || 5;\n    }\n\n    getShapeName(): string {\n        return 'StarShape';\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        Object.assign(context, this.options);\n\n        let rotation = Math.PI / 2 * 3;\n        let spikeX = this.positionPoint.x;\n        let spikeY = this.positionPoint.y;\n        let step = Math.PI / this.spikes;\n\n        context.beginPath();\n        context.moveTo(this.positionPoint.x, this.positionPoint.y - this.radius);\n\n        for (let i = 0; i < this.spikes; i++) {\n            spikeX = this.positionPoint.x + Math.cos(rotation) * this.radius;\n            spikeY = this.positionPoint.y + Math.sin(rotation) * this.radius;\n            context.lineTo(spikeX, spikeY);\n            rotation += step;\n\n            spikeX = this.positionPoint.x + Math.cos(rotation) * (this.radius * 0.4);\n            spikeY = this.positionPoint.y + Math.sin(rotation) * (this.radius * 0.4);\n            context.lineTo(spikeX, spikeY);\n            rotation += step;\n            context.stroke();\n        }\n\n        context.lineTo(this.positionPoint.x, this.positionPoint.y - this.radius);\n        context.closePath();\n\n        context.stroke();\n\n        if (this.options.shouldFillShape) {\n            context.fill();\n        }\n    }\n\n    drawPreview(context: CanvasRenderingContext2D) {\n        this.positionPoint = new CanvasWhiteboardPoint(context.canvas.width / 2, context.canvas.height / 2);\n        this.radius = this.calculateRadius(context.canvas.width - 2, context.canvas.height / 2);\n        this.draw(context);\n    }\n\n    onUpdateReceived(update: CanvasWhiteboardUpdate) {\n        this.radius = this.calculateRadius(update.x, update.y);\n    }\n\n    calculateRadius(x: number, y: number): number {\n        return Math.sqrt(Math.pow(x - this.positionPoint.x, 2) + Math.pow(y - this.positionPoint.y, 2));\n    }\n}\n","import {CanvasWhiteboardShape} from \"./canvas-whiteboard-shape\";\nimport {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\nimport {CanvasWhiteboardPoint} from \"../canvas-whiteboard-point\";\nimport {CanvasWhiteboardUpdate} from \"../canvas-whiteboard-update.model\";\n\nexport class LineShape extends CanvasWhiteboardShape {\n    endPosition: CanvasWhiteboardPoint;\n\n    constructor(positionPoint?: CanvasWhiteboardPoint,\n                options?: CanvasWhiteboardShapeOptions,\n                endPosition?: CanvasWhiteboardPoint) {\n        super(positionPoint, options);\n        this.endPosition = endPosition || new CanvasWhiteboardPoint(this.positionPoint.x, this.positionPoint.y);\n    }\n\n    getShapeName(): string {\n        return 'LineShape';\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        if (!this.endPosition) {\n            return;\n        }\n        context.beginPath();\n        Object.assign(context, this.options);\n\n        context.moveTo(this.positionPoint.x, this.positionPoint.y);\n        context.lineTo(this.endPosition.x, this.endPosition.y);\n\n        context.closePath();\n        context.stroke();\n    }\n\n    drawPreview(context: CanvasRenderingContext2D) {\n        this.positionPoint = new CanvasWhiteboardPoint(0, 0);\n        this.endPosition = new CanvasWhiteboardPoint(context.canvas.width, context.canvas.height);\n        this.draw(context);\n    }\n\n    onUpdateReceived(update: CanvasWhiteboardUpdate) {\n        this.endPosition = new CanvasWhiteboardPoint(update.x, update.y);\n    }\n}\n","import {Injectable} from \"@angular/core\";\nimport {CanvasWhiteboardShape} from \"./canvas-whiteboard-shape\";\nimport {CircleShape} from \"./circle-shape\";\nimport {RectangleShape} from \"./rectangle-shape\";\nimport {FreeHandShape} from \"./free-hand-shape\";\nimport {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\nimport {CanvasWhiteboardPoint} from \"../canvas-whiteboard-point\";\nimport {SmileyShape} from \"./smiley-shape\";\nimport {StarShape} from \"./star-shape\";\nimport {LineShape} from \"./line-shape\";\nimport {BehaviorSubject, Observable} from \"rxjs/index\";\n\nexport interface INewCanvasWhiteboardShape<T extends CanvasWhiteboardShape> {\n    new(positionPoint?: CanvasWhiteboardPoint, options?: CanvasWhiteboardShapeOptions, ...args: any[]): T;\n}\n\n@Injectable()\nexport class CanvasWhiteboardShapeService {\n    private _registeredShapesSubject: BehaviorSubject<Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>>;\n    public registeredShapes$: Observable<Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>>;\n\n    constructor() {\n        this._registeredShapesSubject = new BehaviorSubject([\n            FreeHandShape,\n            LineShape,\n            RectangleShape,\n            CircleShape,\n            StarShape,\n            SmileyShape\n        ]);\n        this.registeredShapes$ = this._registeredShapesSubject.asObservable();\n    }\n\n    getShapeConstructorFromShapeName(shapeName: string): INewCanvasWhiteboardShape<CanvasWhiteboardShape> {\n        return this.getCurrentRegisteredShapes().find((shape) =>\n            (new shape).getShapeName() === shapeName);\n    }\n\n    getCurrentRegisteredShapes(): Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>> {\n        return this._registeredShapesSubject.getValue();\n    }\n\n    isRegisteredShape(shape: INewCanvasWhiteboardShape<CanvasWhiteboardShape>) {\n        return this.getCurrentRegisteredShapes().indexOf(shape) !== -1;\n    }\n\n    registerShape(shape: INewCanvasWhiteboardShape<CanvasWhiteboardShape>) {\n        if (this.isRegisteredShape(shape)) {\n            console.warn(`You tried to register a shape:${shape}, but is has already been registered.`);\n            return;\n        }\n\n        let registeredShapes = this.getCurrentRegisteredShapes();\n        registeredShapes.push(shape);\n        this._registeredShapesSubject.next(registeredShapes);\n    }\n\n    registerShapes(shapes: Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>) {\n        this._registeredShapesSubject.next(\n            this.getCurrentRegisteredShapes()\n                .concat(\n                    shapes.filter((shape) => {\n                        if (this.isRegisteredShape(shape)) {\n                            console.warn(`You tried to register a shape:${shape}, but is has already been registered.`);\n                            return false;\n                        }\n\n                        return true;\n                    })\n                )\n        );\n    }\n\n    unregisterShape(shape: INewCanvasWhiteboardShape<CanvasWhiteboardShape>) {\n        this._registeredShapesSubject.next(\n            this.getCurrentRegisteredShapes().filter((registeredShape) => registeredShape !== shape)\n        );\n    }\n\n    unregisterShapes(shapes: Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>) {\n        this._registeredShapesSubject.next(\n            this.getCurrentRegisteredShapes().filter((shape) => shapes.indexOf(shape) === -1)\n        );\n    }\n}\n"],"names":["update","selectedShapeOptions","Object","assign","CanvasWhiteboardShapeOptions","this","generateShapePreviewOptions","lineWidth","CanvasWhiteboardComponent","prototype","shouldFillShape","fillColor","fillStyle","strokeStyle","strokeColor","lineJoin","lineCap","_prepareUpdateForBatchDispatch","_this","_batchUpdates","push","cloneDeep","_updateTimeout","setTimeout","onBatchUpdate","emit","batchUpdateTimeoutDuration","drawUpdates","updates","_canDraw","_drawMissingUpdates","forEach","_draw","_updatesNotDrawn","concat","length","updatesToDraw","_drawImage","context","image","x","y","width","height","offsetX","offsetY","arguments","canvas","finalDrawX","finalDrawY","finalDrawWidth","finalDrawHeight","imageWidth","imageHeight","radius","Math","min","newWidth","newHeight","aspectRatio","abs","drawImage","generateCanvasDataUrl","returnedDataType","returnedDataQuality","toDataURL","generateCanvasBlob","callbackFn","toBlobMethod","toBlob","bind","msToBlob","callback","blob","downloadCanvasImage","downloadData","customFileName","undefined","window","navigator","msSaveOrOpenBlob","downloadLink","document","createElement","setAttribute","fileName","downloadedFileName","Date","valueOf","_generateDataTypeString","body","appendChild","click","removeChild","_saveCanvasBlob","generateCanvasData","saveLocal","generatedData","onSave","shouldDownloadDrawing","split","toggleStrokeColorPicker","value","showStrokeColorPicker","_isNullOrUndefined","toggleFillColorPicker","showFillColorPicker","toggleShapeSelector","showShapeSelector","selectShape","newShapeBlueprint","selectedShapeConstructor","getDrawingHistory","_updateHistory","_unsubscribe","subscription","unsubscribe","_generateUUID","_random4","floor","random","toString","substring","ngOnDestroy","_resizeSubscription","_registeredShapesSubscription","_canvasWhiteboardServiceSubscriptions","type","Component","args","selector","template","styles","DEFAULT_STYLES","NgZone","ChangeDetectorRef","CanvasWhiteboardService","CanvasWhiteboardShapeService","options","Input","imageUrl","drawButtonClass","clearButtonClass","undoButtonClass","redoButtonClass","saveDataButtonClass","drawButtonText","clearButtonText","undoButtonText","redoButtonText","saveDataButtonText","drawButtonEnabled","clearButtonEnabled","undoButtonEnabled","redoButtonEnabled","saveDataButtonEnabled","colorPickerEnabled","startingColor","scaleFactor","drawingEnabled","shapeSelectorEnabled","onClear","Output","onUndo","onRedo","onImageLoaded","ViewChild","_incompleteShapesCanvas","CanvasWhiteboardShapeSelectorComponent","_elementRef","_canvasWhiteboardShapeService","onToggleShapeSelector","EventEmitter","onShapeSelected","registeredShapes$","shape","closeOnExternalClick","event","nativeElement","contains","target","preventDefault","host","(document:mousedown)","(document:touchstart)","ElementRef","shapeOptions","CanvasWhiteboardColorPickerComponent","selectedColor","showColorPicker","onToggleColorPicker","onColorSelected","onSecondaryColorSelected","ngOnInit","_context","getContext","createColorPalette","gradient","createLinearGradient","addColorStop","fillRect","toggleColorPicker","determineColorFromCanvas","canvasRect","getBoundingClientRect","imageData","getImageData","clientX","left","clientY","top","data","selectColor","color","previewText","CanvasWhiteboardShapePreviewComponent","ngAfterViewInit","drawShapePreview","ngOnChanges","changes","clearRect","shapeConstructor","CanvasWhiteboardPoint","drawPreview","CanvasWhiteboardModule","NgModule","imports","CommonModule","declarations","providers","exports","START","DRAG","STOP","CanvasWhiteboardUpdateType","CanvasWhiteboardUpdate","UUID","selectedShape","deserializeJson","json","parsedJson","JSON","parse","e","console","error","stringify","objectToSerialize","toFixed","uuid","_canvasDrawSubject","Subject","canvasDrawSubject$","asObservable","_canvasClearSubject","canvasClearSubject$","_canvasUndoSubject","canvasUndoSubject$","_canvasRedoSubject","canvasRedoSubject$","drawCanvas","next","clearCanvas","undoCanvas","updateUUD","redoCanvas","CanvasWhiteboardShape","positionPoint","isVisible","onStopReceived","CircleShape","_super","call","__extends","getShapeName","draw","beginPath","arc","PI","stroke","fill","closePath","calculateRadius","onUpdateReceived","sqrt","pow","RectangleShape","rect","FreeHandShape","linePositions","moveTo","lineTo","i","controlPoint1","controlPoint2","endPoint","bezierCurveTo","linePosition","SmileyShape","leftEyeX","rightEyeX","eyesY","eyeSize","StarShape","spikes","rotation","spikeX","spikeY","step","cos","sin","LineShape","endPosition","_registeredShapesSubject","BehaviorSubject","getShapeConstructorFromShapeName","shapeName","getCurrentRegisteredShapes","find","getValue","isRegisteredShape","indexOf","registerShape","warn","registeredShapes","registerShapes","shapes","filter","unregisterShape","registeredShape","unregisterShapes","Injectable","ngZone","_changeDetector","_canvasWhiteboardService","_clientDragging","_undoStack","_redoStack","_shapesMap","Map","_incompleteShapesMap","canvasWhiteboardShapePreviewOptions","defineProperty","get","_imageUrl","set","_imageElement","_redrawHistory","_initInputsFromOptions","_initCanvasEventListeners","_initCanvasServiceObservables","_incompleteShapesCanvasContext","currentValue","previousValue","_calculateCanvasWidthAndHeight","property","runOutsideAngular","fromEvent","pipe","debounceTime","distinctUntilChanged","subscribe","run","_redrawCanvasOnResize","addEventListener","_canvasKeyDown","_undoCanvas","_redoCanvas","parentNode","clientWidth","clientHeight","_loadImage","Image","src","clearCanvasLocal","_removeCanvasData","_redrawBackground","save","restore","_drawStartingColor","previousFillStyle","getShouldDraw","getDrawingEnabled","toggleDrawingEnabled","setDrawingEnabled","changeColor","newStrokeColor","changeStrokeColor","detectChanges","changeFillColor","newFillColor","undoLocal","undo","updateUUID","pop","has","drawAllShapes","redoLocal","redo","canvasUserEvents","updateType","eventPosition","_getCanvasEventPosition","_lastUUID","_addCurrentShapeDataToAnUpdate","_prepareToSendUpdate","eventData","canvasBoundingRect","hasTouches","touches","changedTouches","scaleWidth","scaleHeight","xPosition","yPosition","ctrlKey","metaKey","keyCode","updateShapeConstructor","_drawIncompleteShapes","delete","_swapCompletedShapeToActualCanvas","_resetIncompleteShapeCanvas"],"mappings":"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"}