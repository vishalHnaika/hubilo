{"version":3,"file":"ng2-canvas-whiteboard.es5.js","sources":["../../ng2-canvas-whiteboard.ts","../../public_api.ts","../../src/ng2-canvas-whiteboard.ts","../../src/ng2-canvas-whiteboard.module.ts","../../src/shapes/canvas-whiteboard-shape-preview.component.ts","../../src/canvas-whiteboard-colorpicker.component.ts","../../src/shapes/canvas-whiteboard-shape-selector.component.ts","../../src/canvas-whiteboard.component.ts","../../src/shapes/canvas-whiteboard-shape.service.ts","../../src/shapes/line-shape.ts","../../src/shapes/star-shape.ts","../../src/shapes/smiley-shape.ts","../../src/shapes/free-hand-shape.ts","../../src/shapes/rectangle-shape.ts","../../src/shapes/circle-shape.ts","../../src/shapes/canvas-whiteboard-shape.ts","../../src/shapes/canvas-whiteboard-shape-options.ts","../../src/canvas-whiteboard-point.ts","../../src/canvas-whiteboard.service.ts","../../src/template.ts","../../src/canvas-whiteboard-update.model.ts"],"sourcesContent":["export * from './public_api';\n","export * from './src/ng2-canvas-whiteboard';","export {CanvasWhiteboardComponent} from \"./canvas-whiteboard.component\";\nexport {CanvasWhiteboardUpdate} from \"./canvas-whiteboard-update.model\";\nexport {CanvasWhiteboardService} from \"./canvas-whiteboard.service\";\nexport {CanvasWhiteboardOptions} from \"./canvas-whiteboard-options\";\nexport {CanvasWhiteboardPoint} from \"./canvas-whiteboard-point\";\nexport {CanvasWhiteboardShape} from \"./shapes/canvas-whiteboard-shape\";\nexport {CanvasWhiteboardShapeOptions} from \"./shapes/canvas-whiteboard-shape-options\";\nexport {CanvasWhiteboardShapeService} from \"./shapes/canvas-whiteboard-shape.service\";\nexport {RectangleShape} from \"./shapes/rectangle-shape\";\nexport {CircleShape} from \"./shapes/circle-shape\";\nexport {CanvasWhiteboardShapeSelectorComponent} from \"./shapes/canvas-whiteboard-shape-selector.component\";\nexport {CanvasWhiteboardColorPickerComponent} from './canvas-whiteboard-colorpicker.component';\nexport {CanvasWhiteboardShapePreviewComponent} from './shapes/canvas-whiteboard-shape-preview.component';\nexport {CanvasWhiteboardModule} from './ng2-canvas-whiteboard.module';\nexport {DEFAULT_STYLES} from './template';","import {NgModule} from \"@angular/core\";\nimport {CanvasWhiteboardComponent} from \"./canvas-whiteboard.component\";\nimport {CommonModule} from \"@angular/common\";\nimport {CanvasWhiteboardColorPickerComponent} from \"./canvas-whiteboard-colorpicker.component\";\nimport {CanvasWhiteboardService} from \"./canvas-whiteboard.service\";\nimport {CanvasWhiteboardShapeService} from \"./shapes/canvas-whiteboard-shape.service\";\nimport {CanvasWhiteboardShapeSelectorComponent} from \"./shapes/canvas-whiteboard-shape-selector.component\";\nimport {CanvasWhiteboardShapePreviewComponent} from \"./shapes/canvas-whiteboard-shape-preview.component\";\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        CanvasWhiteboardComponent,\n        CanvasWhiteboardColorPickerComponent,\n        CanvasWhiteboardShapeSelectorComponent,\n        CanvasWhiteboardShapePreviewComponent\n    ],\n    providers: [\n        CanvasWhiteboardService,\n        CanvasWhiteboardShapeService\n    ],\n    exports: [CanvasWhiteboardComponent]\n})\nexport class CanvasWhiteboardModule {\n}\n","import {\n    Component,\n    ElementRef,\n    Input,\n    ViewChild,\n    AfterViewInit,\n    OnChanges,\n    SimpleChanges\n} from \"@angular/core\";\nimport {INewCanvasWhiteboardShape} from \"./canvas-whiteboard-shape.service\";\nimport {CanvasWhiteboardShape} from \"./canvas-whiteboard-shape\";\nimport {CanvasWhiteboardPoint} from \"../canvas-whiteboard-point\";\nimport {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\n\n@Component({\n    selector: \"canvas-whiteboard-shape-preview\",\n    template: `\n        <canvas #canvasWhiteboardShapePreview width=\"50px\" height=\"50px\"\n                class=\"canvas-whiteboard-shape-preview-canvas\"></canvas>\n    `,\n    styles: [`\n        .canvas-whiteboard-shape-preview-canvas {\n            cursor: pointer;\n        }\n    `]\n})\nexport class CanvasWhiteboardShapePreviewComponent implements AfterViewInit, OnChanges {\n    @Input() readonly shapeConstructor: INewCanvasWhiteboardShape<CanvasWhiteboardShape>;\n    @Input() readonly shapeOptions: CanvasWhiteboardShapeOptions;\n\n    @ViewChild('canvasWhiteboardShapePreview') canvas: ElementRef;\n\n    ngAfterViewInit() {\n        this.drawShapePreview();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.shapeConstructor || changes.shapeOptions) {\n            this.drawShapePreview();\n        }\n    }\n\n    drawShapePreview() {\n        if (!this.canvas) { return; }\n\n        let context: CanvasRenderingContext2D = this.canvas.nativeElement.getContext(\"2d\");\n        context.clearRect(0, 0, context.canvas.width, context.canvas.height);\n\n        let concreteShape = new this.shapeConstructor(\n            new CanvasWhiteboardPoint(0, 0),\n            Object.assign(new CanvasWhiteboardShapeOptions(), this.shapeOptions)\n        );\n\n        concreteShape.drawPreview(context);\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter, OnInit, ViewChild, ElementRef, Input\n} from '@angular/core';\n\n@Component({\n    selector: 'canvas-whiteboard-colorpicker',\n    host: {\n        '(document:mousedown)': 'closeOnExternalClick($event)',\n        '(document:touchstart)': 'closeOnExternalClick($event)',\n    },\n    template: `\n        <div [hidden]=\"showColorPicker\" class=\"canvas-whiteboard-colorpicker-input\"\n               (click)=\"toggleColorPicker($event)\">\n               <div class=\"selected-color-type-wrapper\">{{previewText}}</div>\n               <div class=\"selected-color-preview\" [style.background]=\"selectedColor\"></div>\n        </div>\n        <div [hidden]=\"!showColorPicker\" class=\"canvas-whiteboard-colorpicker-wrapper\">\n            <div (click)=\"selectColor('transparent')\" class=\"transparent-color\">Transparent</div>\n            <canvas #canvaswhiteboardcolorpicker class=\"canvas-whiteboard-colorpicker\" width=\"284\" height=\"155\"\n                    (click)=\"selectColor(determineColorFromCanvas($event))\"></canvas>\n        </div>\n    `,\n    styles: [`\n        .selected-color-preview {\n            width: 100%;\n            height: 20%;\n            position: absolute;\n            bottom: 0;\n            left: 0;\n        }\n        \n        .selected-color-type-wrapper {\n            display: inline-block;\n            height: 100%;\n            width: 100%;\n            text-align: center;\n            font-size: 14px;\n            color: #000;\n        }\n        \n        .transparent-color {\n            font-size: 14px;\n        }\n        \n        .canvas-whiteboard-colorpicker-wrapper {\n            border: 1px solid #afafaf;\n            color: #000;\n        }\n\n        @media (min-width: 401px) {\n            .canvas-whiteboard-colorpicker-wrapper {\n                position: absolute;\n            }\n        }\n\n        .canvas-whiteboard-colorpicker-input {\n            display: inline-block;\n            position:relative;\n            width: 44px;\n            height: 44px;\n            margin: 5px;\n            cursor: pointer;\n            color: #000;\n        }\n    `]\n})\nexport class CanvasWhiteboardColorPickerComponent implements OnInit {\n\n    @Input() previewText: string;\n    @Input() readonly selectedColor: string = 'rgba(0,0,0,1)';\n    @ViewChild('canvaswhiteboardcolorpicker') canvas: ElementRef;\n\n    @Input() readonly showColorPicker: boolean = false;\n    private _context: CanvasRenderingContext2D;\n\n    @Output() onToggleColorPicker = new EventEmitter<boolean>();\n    @Output() onColorSelected = new EventEmitter<string>();\n    @Output() onSecondaryColorSelected = new EventEmitter<string>();\n\n    constructor(private _elementRef: ElementRef) {\n    }\n\n    /**\n     * Initialize the canvas drawing context. If we have an aspect ratio set up, the canvas will resize\n     * according to the aspect ratio.\n     */\n    ngOnInit() {\n        this._context = this.canvas.nativeElement.getContext(\"2d\");\n        this.createColorPalette();\n    }\n\n    createColorPalette() {\n        let gradient = this._context.createLinearGradient(0, 0, this._context.canvas.width, 0);\n        gradient.addColorStop(0, \"rgb(255, 0, 0)\");\n        gradient.addColorStop(0.15, \"rgb(255, 0, 255)\");\n        gradient.addColorStop(0.33, \"rgb(0, 0, 255)\");\n        gradient.addColorStop(0.49, \"rgb(0, 255, 255)\");\n        gradient.addColorStop(0.67, \"rgb(0, 255, 0)\");\n        gradient.addColorStop(0.84, \"rgb(255, 255, 0)\");\n        gradient.addColorStop(1, \"rgb(255, 0, 0)\");\n        this._context.fillStyle = gradient;\n        this._context.fillRect(0, 0, this._context.canvas.width, this._context.canvas.height);\n\n        gradient = this._context.createLinearGradient(0, 0, 0, this._context.canvas.height);\n        gradient.addColorStop(0, \"rgba(255, 255, 255, 1)\");\n        gradient.addColorStop(0.5, \"rgba(255, 255, 255, 0)\");\n        gradient.addColorStop(0.5, \"rgba(0, 0, 0, 0)\");\n        gradient.addColorStop(1, \"rgba(0, 0, 0, 1)\");\n        this._context.fillStyle = gradient;\n        this._context.fillRect(0, 0, this._context.canvas.width, this._context.canvas.height);\n    }\n\n    closeOnExternalClick(event) {\n        if (!this._elementRef.nativeElement.contains(event.target) && this.showColorPicker) {\n            this.onToggleColorPicker.emit(false);\n        }\n    }\n\n    toggleColorPicker(event: Event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        this.onToggleColorPicker.emit(!this.showColorPicker);\n    }\n\n    determineColorFromCanvas(event: any) {\n        let canvasRect = this._context.canvas.getBoundingClientRect();\n        let imageData = this._context.getImageData(event.clientX - canvasRect.left, event.clientY - canvasRect.top, 1, 1);\n\n        return `rgba(${imageData.data[0]}, ${imageData.data[1]}, ${imageData.data[2]}, ${imageData.data[3]})`;\n    }\n\n    selectColor(color: string) {\n        this.onColorSelected.emit(color);\n        this.toggleColorPicker(null);\n    }\n}","import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output\n} from \"@angular/core\";\nimport {CanvasWhiteboardShapeService, INewCanvasWhiteboardShape} from \"./canvas-whiteboard-shape.service\";\nimport {CanvasWhiteboardShape} from \"./canvas-whiteboard-shape\";\nimport {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\nimport {Observable} from \"rxjs/index\";\n\n@Component({\n    selector: \"canvas-whiteboard-shape-selector\",\n    host: {\n        '(document:mousedown)': 'closeOnExternalClick($event)',\n        '(document:touchstart)': 'closeOnExternalClick($event)',\n    },\n    template: `\n        <div *ngIf=\"!showShapeSelector\" (click)=\"toggleShapeSelector($event)\"\n             class=\"canvas-whiteboard-shape-selector-selected-preview\">\n            <canvas-whiteboard-shape-preview [shapeConstructor]=\"selectedShapeConstructor\"\n                                             [shapeOptions]=\"shapeOptions\"></canvas-whiteboard-shape-preview>\n        </div>\n        <div class=\"canvas-whiteboard-shape-selector-wrapper\" *ngIf=\"showShapeSelector\">\n            <canvas-whiteboard-shape-preview *ngFor=\"let shapeConstructor of registeredShapes$ | async\"\n                                             [shapeConstructor]=\"shapeConstructor\"\n                                             [shapeOptions]=\"shapeOptions\"\n                                             (click)=\"selectShape(shapeConstructor)\"></canvas-whiteboard-shape-preview>\n        </div>\n    `,\n    styles: [`\n        .canvas-whiteboard-shape-selector-selected-preview {\n            vertical-align: bottom;\n            display: inline-block;\n        }\n\n        .canvas-whiteboard-shape-selector-wrapper {\n            display: block;\n            padding: 4px;\n            border: 1px solid #afafaf;\n        }\n\n        @media (min-width: 401px) {\n            .canvas-whiteboard-shape-selector-wrapper {\n            }\n        }\n    `]\n})\nexport class CanvasWhiteboardShapeSelectorComponent {\n    @Input() readonly showShapeSelector: boolean = false;\n    @Input() readonly selectedShapeConstructor: INewCanvasWhiteboardShape<CanvasWhiteboardShape>;\n    @Input() readonly shapeOptions: CanvasWhiteboardShapeOptions;\n\n    @Output() onToggleShapeSelector = new EventEmitter<boolean>();\n    @Output() onShapeSelected = new EventEmitter<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>();\n\n    registeredShapes$: Observable<INewCanvasWhiteboardShape<CanvasWhiteboardShape>[]>;\n\n    constructor(private _elementRef: ElementRef,\n                private _canvasWhiteboardShapeService: CanvasWhiteboardShapeService) {\n        this.registeredShapes$ = this._canvasWhiteboardShapeService.registeredShapes$;\n    }\n\n    selectShape(shape: INewCanvasWhiteboardShape<CanvasWhiteboardShape>) {\n        this.onShapeSelected.emit(shape);\n        this.toggleShapeSelector(null);\n    }\n\n    closeOnExternalClick(event) {\n        if (!this._elementRef.nativeElement.contains(event.target) && this.showShapeSelector) {\n            this.onToggleShapeSelector.emit(false);\n        }\n    }\n\n    toggleShapeSelector(event: Event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        this.onToggleShapeSelector.emit(!this.showShapeSelector);\n    }\n}\n","import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ElementRef,\n    OnInit,\n    OnChanges, OnDestroy, AfterViewInit, NgZone, ChangeDetectorRef\n} from '@angular/core';\nimport {CanvasWhiteboardUpdate, CanvasWhiteboardUpdateType} from \"./canvas-whiteboard-update.model\";\nimport {DEFAULT_STYLES} from \"./template\";\nimport {CanvasWhiteboardService} from \"./canvas-whiteboard.service\";\nimport {CanvasWhiteboardOptions} from \"./canvas-whiteboard-options\";\nimport {CanvasWhiteboardShape} from \"./shapes/canvas-whiteboard-shape\";\nimport {CanvasWhiteboardPoint} from \"./canvas-whiteboard-point\";\nimport {CanvasWhiteboardShapeService, INewCanvasWhiteboardShape} from \"./shapes/canvas-whiteboard-shape.service\";\nimport {CanvasWhiteboardShapeOptions} from \"./shapes/canvas-whiteboard-shape-options\";\nimport {fromEvent, Subscription} from \"rxjs/index\";\nimport {debounceTime, distinctUntilChanged} from \"rxjs/operators\";\nimport {cloneDeep} from \"lodash\";\n\n@Component({\n    selector: 'canvas-whiteboard',\n    template:\n            `\n        <div class=\"canvas_wrapper_div\">\n            <div class=\"canvas_whiteboard_buttons\">\n                <canvas-whiteboard-shape-selector *ngIf=\"shapeSelectorEnabled\"\n                                                  [showShapeSelector]=\"showShapeSelector\"\n                                                  [selectedShapeConstructor]=\"selectedShapeConstructor\"\n                                                  [shapeOptions]=\"generateShapePreviewOptions()\"\n                                                  (onToggleShapeSelector)=\"toggleShapeSelector($event)\"\n                                                  (onShapeSelected)=\"selectShape($event)\"></canvas-whiteboard-shape-selector>\n\n                <canvas-whiteboard-colorpicker *ngIf=\"colorPickerEnabled\"\n                                               [previewText]=\"'Fill'\"\n                                               [showColorPicker]=\"showFillColorPicker\"\n                                               [selectedColor]=\"fillColor\"\n                                               (onToggleColorPicker)=\"toggleFillColorPicker($event)\"\n                                               (onColorSelected)=\"changeFillColor($event)\">\n                </canvas-whiteboard-colorpicker>\n\n                <canvas-whiteboard-colorpicker *ngIf=\"colorPickerEnabled\"\n                                               [previewText]=\"'Stroke'\"\n                                               [showColorPicker]=\"showStrokeColorPicker\"\n                                               [selectedColor]=\"strokeColor\"\n                                               (onToggleColorPicker)=\"toggleStrokeColorPicker($event)\"\n                                               (onColorSelected)=\"changeStrokeColor($event)\">\n                </canvas-whiteboard-colorpicker>\n\n\n                <button *ngIf=\"drawButtonEnabled\" (click)=\"toggleDrawingEnabled()\"\n                        [class.canvas_whiteboard_button-draw_animated]=\"getDrawingEnabled()\"\n                        class=\"canvas_whiteboard_button canvas_whiteboard_button-draw\" type=\"button\">\n                    <i [class]=\"drawButtonClass\" aria-hidden=\"true\"></i> {{drawButtonText}}\n                </button>\n\n                <button *ngIf=\"clearButtonEnabled\" (click)=\"clearCanvasLocal()\" type=\"button\"\n                        class=\"canvas_whiteboard_button canvas_whiteboard_button-clear\">\n                    <i [class]=\"clearButtonClass\" aria-hidden=\"true\"></i> {{clearButtonText}}\n                </button>\n\n                <button *ngIf=\"undoButtonEnabled\" (click)=\"undoLocal()\" type=\"button\"\n                        class=\"canvas_whiteboard_button canvas_whiteboard_button-undo\">\n                    <i [class]=\"undoButtonClass\" aria-hidden=\"true\"></i> {{undoButtonText}}\n                </button>\n\n                <button *ngIf=\"redoButtonEnabled\" (click)=\"redoLocal()\" type=\"button\"\n                        class=\"canvas_whiteboard_button canvas_whiteboard_button-redo\">\n                    <i [class]=\"redoButtonClass\" aria-hidden=\"true\"></i> {{redoButtonText}}\n                </button>\n                <button *ngIf=\"saveDataButtonEnabled\" (click)=\"saveLocal()\" type=\"button\"\n                        class=\"canvas_whiteboard_button canvas_whiteboard_button-save\">\n                    <i [class]=\"saveDataButtonClass\" aria-hidden=\"true\"></i> {{saveDataButtonText}}\n                </button>\n            </div>\n            <canvas #canvas class=\"canvas_whiteboard\"></canvas>\n            <canvas #incompleteShapesCanvas class=\"incomplete_shapes_canvas_whiteboard\"\n                    (mousedown)=\"canvasUserEvents($event)\" (mouseup)=\"canvasUserEvents($event)\"\n                    (mousemove)=\"canvasUserEvents($event)\" (mouseout)=\"canvasUserEvents($event)\"\n                    (touchstart)=\"canvasUserEvents($event)\" (touchmove)=\"canvasUserEvents($event)\"\n                    (touchend)=\"canvasUserEvents($event)\" (touchcancel)=\"canvasUserEvents($event)\"></canvas>\n        </div>\n    `,\n    styles: [DEFAULT_STYLES]\n})\nexport class CanvasWhiteboardComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {\n    @Input() options: CanvasWhiteboardOptions;\n\n    // Number of ms to wait before sending out the updates as an array\n    @Input() batchUpdateTimeoutDuration: number = 100;\n\n    private _imageUrl: string;\n    @Input() set imageUrl(imageUrl: string) {\n        this._imageUrl = imageUrl;\n        this._imageElement = null;\n        this._redrawHistory();\n    }\n\n    get imageUrl() {\n        return this._imageUrl;\n    }\n\n    @Input() aspectRatio: number;\n    @Input() drawButtonClass: string;\n    @Input() clearButtonClass: string;\n    @Input() undoButtonClass: string;\n    @Input() redoButtonClass: string;\n    @Input() saveDataButtonClass: string;\n    @Input() drawButtonText: string = \"\";\n    @Input() clearButtonText: string = \"\";\n    @Input() undoButtonText: string = \"\";\n    @Input() redoButtonText: string = \"\";\n    @Input() saveDataButtonText: string = \"\";\n    @Input() drawButtonEnabled: boolean = true;\n    @Input() clearButtonEnabled: boolean = true;\n    @Input() undoButtonEnabled: boolean = false;\n    @Input() redoButtonEnabled: boolean = false;\n    @Input() saveDataButtonEnabled: boolean = false;\n    @Input() shouldDownloadDrawing: boolean = true;\n    @Input() colorPickerEnabled: boolean = false;\n    @Input() lineWidth: number = 2;\n    @Input() strokeColor: string = \"rgba(0, 0, 0, 1)\";\n    @Input() startingColor: string = \"#fff\";\n    @Input() scaleFactor: number = 0;\n    @Input() drawingEnabled: boolean = false;\n    @Input() showStrokeColorPicker: boolean = false;\n    @Input() showFillColorPicker: boolean = false;\n    @Input() downloadedFileName: string;\n\n    @Input() lineJoin: string = \"round\";\n    @Input() lineCap: string = \"round\";\n    @Input() shapeSelectorEnabled: boolean = true;\n    @Input() showShapeSelector: boolean = false;\n    @Input() fillColor: string = \"rgba(0,0,0,0)\";\n\n    @Output() onClear = new EventEmitter<any>();\n    @Output() onUndo = new EventEmitter<any>();\n    @Output() onRedo = new EventEmitter<any>();\n    @Output() onBatchUpdate = new EventEmitter<CanvasWhiteboardUpdate[]>();\n    @Output() onImageLoaded = new EventEmitter<any>();\n    @Output() onSave = new EventEmitter<string | Blob>();\n\n    @ViewChild('canvas') canvas: ElementRef;\n    context: CanvasRenderingContext2D;\n\n    @ViewChild('incompleteShapesCanvas') private _incompleteShapesCanvas: ElementRef;\n    private _incompleteShapesCanvasContext: CanvasRenderingContext2D;\n    private _incompleteShapesMap: Map<string, CanvasWhiteboardShape>;\n\n    private _imageElement: any;\n\n    private _canDraw = true;\n\n    private _clientDragging = false;\n\n    private _updateHistory: CanvasWhiteboardUpdate[] = [];\n    private _lastUUID: string;\n    private _shapesMap: Map<string, CanvasWhiteboardShape>;\n\n    private _undoStack: string[] = []; // Stores the value of start and count for each continuous stroke\n    private _redoStack: string[] = [];\n    private _batchUpdates: CanvasWhiteboardUpdate[] = [];\n    private _updatesNotDrawn: any = [];\n\n    private _updateTimeout: any;\n\n    private _canvasWhiteboardServiceSubscriptions: Subscription[] = [];\n    private _resizeSubscription: Subscription;\n    private _registeredShapesSubscription: Subscription;\n\n    selectedShapeConstructor: INewCanvasWhiteboardShape<CanvasWhiteboardShape>;\n    canvasWhiteboardShapePreviewOptions: CanvasWhiteboardShapeOptions;\n\n    constructor(private ngZone: NgZone,\n                private _changeDetector: ChangeDetectorRef,\n                private _canvasWhiteboardService: CanvasWhiteboardService,\n                private _canvasWhiteboardShapeService: CanvasWhiteboardShapeService) {\n        this._shapesMap = new Map<string, CanvasWhiteboardShape>();\n        this._incompleteShapesMap = new Map<string, CanvasWhiteboardShape>();\n        this.canvasWhiteboardShapePreviewOptions = this.generateShapePreviewOptions();\n    }\n\n    /**\n     * Initialize the canvas drawing context. If we have an aspect ratio set up, the canvas will resize\n     * according to the aspect ratio.\n     */\n    ngOnInit(): void {\n        this._initInputsFromOptions(this.options);\n        this._initCanvasEventListeners();\n        this._initCanvasServiceObservables();\n        this.context = this.canvas.nativeElement.getContext(\"2d\");\n        this._incompleteShapesCanvasContext = this._incompleteShapesCanvas.nativeElement.getContext(\"2d\");\n    }\n\n    /**\n     * If an image exists and it's url changes, we need to redraw the new image on the canvas.\n     */\n    ngOnChanges(changes: any): void {\n        if (changes.options && changes.options.currentValue != changes.options.previousValue) {\n            this._initInputsFromOptions(changes.options.currentValue);\n        }\n    }\n\n    /**\n     * Recalculate the width and height of the canvas after the view has been fully initialized\n     */\n    ngAfterViewInit(): void {\n        this._calculateCanvasWidthAndHeight();\n        this._redrawHistory();\n    }\n\n    /**\n     * This method reads the options which are helpful since they can be really long when specified in HTML\n     * This method is also called everytime the options object changes\n     * For security reasons we must check each item on its own since if we iterate the keys\n     * we may be injected with malicious values\n     *\n     * @param options\n     */\n    private _initInputsFromOptions(options: CanvasWhiteboardOptions) {\n        if (options) {\n            if (!this._isNullOrUndefined(options.batchUpdateTimeoutDuration)) this.batchUpdateTimeoutDuration = options.batchUpdateTimeoutDuration;\n            if (!this._isNullOrUndefined(options.imageUrl)) this.imageUrl = options.imageUrl;\n            if (!this._isNullOrUndefined(options.aspectRatio)) this.aspectRatio = options.aspectRatio;\n            if (!this._isNullOrUndefined(options.drawButtonClass)) this.drawButtonClass = options.drawButtonClass;\n            if (!this._isNullOrUndefined(options.clearButtonClass)) this.clearButtonClass = options.clearButtonClass;\n            if (!this._isNullOrUndefined(options.undoButtonClass)) this.undoButtonClass = options.undoButtonClass;\n            if (!this._isNullOrUndefined(options.redoButtonClass)) this.redoButtonClass = options.redoButtonClass;\n            if (!this._isNullOrUndefined(options.saveDataButtonClass)) this.saveDataButtonClass = options.saveDataButtonClass;\n            if (!this._isNullOrUndefined(options.drawButtonText)) this.drawButtonText = options.drawButtonText;\n            if (!this._isNullOrUndefined(options.clearButtonText)) this.clearButtonText = options.clearButtonText;\n            if (!this._isNullOrUndefined(options.undoButtonText)) this.undoButtonText = options.undoButtonText;\n            if (!this._isNullOrUndefined(options.redoButtonText)) this.redoButtonText = options.redoButtonText;\n            if (!this._isNullOrUndefined(options.saveDataButtonText)) this.saveDataButtonText = options.saveDataButtonText;\n            if (!this._isNullOrUndefined(options.drawButtonEnabled)) this.drawButtonEnabled = options.drawButtonEnabled;\n            if (!this._isNullOrUndefined(options.clearButtonEnabled)) this.clearButtonEnabled = options.clearButtonEnabled;\n            if (!this._isNullOrUndefined(options.undoButtonEnabled)) this.undoButtonEnabled = options.undoButtonEnabled;\n            if (!this._isNullOrUndefined(options.redoButtonEnabled)) this.redoButtonEnabled = options.redoButtonEnabled;\n            if (!this._isNullOrUndefined(options.saveDataButtonEnabled)) this.saveDataButtonEnabled = options.saveDataButtonEnabled;\n            if (!this._isNullOrUndefined(options.colorPickerEnabled)) this.colorPickerEnabled = options.colorPickerEnabled;\n            if (!this._isNullOrUndefined(options.lineWidth)) this.lineWidth = options.lineWidth;\n            if (!this._isNullOrUndefined(options.strokeColor)) this.strokeColor = options.strokeColor;\n            if (!this._isNullOrUndefined(options.shouldDownloadDrawing)) this.shouldDownloadDrawing = options.shouldDownloadDrawing;\n            if (!this._isNullOrUndefined(options.startingColor)) this.startingColor = options.startingColor;\n            if (!this._isNullOrUndefined(options.scaleFactor)) this.scaleFactor = options.scaleFactor;\n            if (!this._isNullOrUndefined(options.drawingEnabled)) this.drawingEnabled = options.drawingEnabled;\n            if (!this._isNullOrUndefined(options.downloadedFileName)) this.downloadedFileName = options.downloadedFileName;\n            if (!this._isNullOrUndefined(options.lineJoin)) this.lineJoin = options.lineJoin;\n            if (!this._isNullOrUndefined(options.lineCap)) this.lineCap = options.lineCap;\n            if (!this._isNullOrUndefined(options.shapeSelectorEnabled)) this.shapeSelectorEnabled = options.shapeSelectorEnabled;\n            if (!this._isNullOrUndefined(options.showShapeSelector)) this.showShapeSelector = options.showShapeSelector;\n            if (!this._isNullOrUndefined(options.fillColor)) this.fillColor = options.fillColor;\n            if (!this._isNullOrUndefined(options.showStrokeColorPicker)) this.showStrokeColorPicker = options.showStrokeColorPicker;\n            if (!this._isNullOrUndefined(options.showFillColorPicker)) this.showFillColorPicker = options.showFillColorPicker;\n        }\n    }\n\n    private _isNullOrUndefined(property: any): boolean {\n        return property === null || property === undefined;\n    }\n\n    /**\n     * Init global window listeners like resize and keydown\n     */\n    private _initCanvasEventListeners(): void {\n        this.ngZone.runOutsideAngular(() => {\n            this._resizeSubscription = fromEvent(window, 'resize')\n                .pipe(\n                    debounceTime(200),\n                    distinctUntilChanged()\n                )\n                .subscribe(() => {\n                    this.ngZone.run(() => {\n                        this._redrawCanvasOnResize();\n                    });\n                });\n        });\n\n        window.addEventListener(\"keydown\", this._canvasKeyDown.bind(this), false);\n    }\n\n    /**\n     * Subscribes to new signals in the canvas whiteboard service and executes methods accordingly\n     * Because of circular publishing and subscribing, the canvas methods do not use the service when\n     * local actions are completed (Ex. clicking undo from the button inside this component)\n     */\n    private _initCanvasServiceObservables(): void {\n        this._canvasWhiteboardServiceSubscriptions.push(this._canvasWhiteboardService.canvasDrawSubject$\n            .subscribe(updates => this.drawUpdates(updates)));\n        this._canvasWhiteboardServiceSubscriptions.push(this._canvasWhiteboardService.canvasClearSubject$\n            .subscribe(() => this.clearCanvas()));\n        this._canvasWhiteboardServiceSubscriptions.push(this._canvasWhiteboardService.canvasUndoSubject$\n            .subscribe((updateUUD) => this._undoCanvas(updateUUD)));\n        this._canvasWhiteboardServiceSubscriptions.push(this._canvasWhiteboardService.canvasRedoSubject$\n            .subscribe((updateUUD) => this._redoCanvas(updateUUD)));\n\n        this._registeredShapesSubscription = this._canvasWhiteboardShapeService.registeredShapes$.subscribe((shapes) => {\n            if (!this.selectedShapeConstructor || !this._canvasWhiteboardShapeService.isRegisteredShape(this.selectedShapeConstructor)) {\n                this.selectedShapeConstructor = shapes[0];\n            }\n        });\n    }\n\n    /**\n     * Calculate the canvas width and height from it's parent container width and height (use aspect ratio if needed)\n     */\n    private _calculateCanvasWidthAndHeight(): void {\n        this.context.canvas.width = this.canvas.nativeElement.parentNode.clientWidth;\n        if (this.aspectRatio) {\n            this.context.canvas.height = this.canvas.nativeElement.parentNode.clientWidth * this.aspectRatio;\n        } else {\n            this.context.canvas.height = this.canvas.nativeElement.parentNode.clientHeight;\n        }\n\n        this._incompleteShapesCanvasContext.canvas.width = this.context.canvas.width;\n        this._incompleteShapesCanvasContext.canvas.height = this.context.canvas.height;\n    }\n\n    /**\n     * Load an image and draw it on the canvas (if an image exists)\n     * @param callbackFn A function that is called after the image loading is finished\n     * @return Emits a value when the image has been loaded.\n     */\n    private _loadImage(callbackFn?: any): void {\n        this._canDraw = false;\n\n        //If we already have the image there is no need to acquire it\n        if (this._imageElement) {\n            this._canDraw = true;\n            callbackFn && callbackFn();\n            return;\n        }\n\n        this._imageElement = new Image();\n        this._imageElement.addEventListener(\"load\", () => {\n            this._canDraw = true;\n            callbackFn && callbackFn();\n            this.onImageLoaded.emit(true);\n        });\n        this._imageElement.src = this.imageUrl;\n    }\n\n    /**\n     * Sends a notification after clearing the canvas\n     * This method should only be called from the clear button in this component since it will emit an clear event\n     * If the client calls this method he may create a circular clear action which may cause danger.\n     */\n    clearCanvasLocal(): void {\n        this.clearCanvas();\n        this.onClear.emit(true);\n    }\n\n    /**\n     * Clears all content on the canvas.\n     */\n    clearCanvas(): void {\n        this._removeCanvasData();\n        this._redoStack = [];\n    }\n\n    /**\n     * This method resets the state of the canvas and redraws it.\n     * It calls a callback function after redrawing\n     * @param callbackFn\n     */\n    private _removeCanvasData(callbackFn?: any): void {\n        this._shapesMap = new Map<string, CanvasWhiteboardShape>();\n        this._clientDragging = false;\n        this._updateHistory = [];\n        this._undoStack = [];\n        this._redrawBackground(callbackFn);\n    }\n\n    /**\n     * Clears the canvas and redraws the image if the url exists.\n     * @param callbackFn A function that is called after the background is redrawn\n     * @return Emits a value when the clearing is finished\n     */\n    private _redrawBackground(callbackFn?: any): void {\n        if (this.context) {\n            if (this.imageUrl) {\n                this._loadImage(() => {\n                    this.context.save();\n                    this._drawImage(this.context, this._imageElement, 0, 0, this.context.canvas.width, this.context.canvas.height, 0.5, 0.5);\n                    this.context.restore();\n                    this._drawMissingUpdates();\n                    callbackFn && callbackFn();\n                });\n            } else {\n                this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n                this._drawStartingColor();\n                callbackFn && callbackFn();\n            }\n        }\n    }\n\n    private _drawStartingColor() {\n        let previousFillStyle = this.context.fillStyle;\n        this.context.save();\n\n        this.context.fillStyle = this.startingColor;\n        this.context.fillRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n        this.context.fillStyle = previousFillStyle;\n\n        this.context.restore();\n    }\n\n\n    /**\n     * @deprecated Use getDrawingEnabled(): boolean\n     */\n    getShouldDraw(): boolean {\n        return this.getDrawingEnabled();\n    }\n\n    /**\n     * Returns a value of whether the user clicked the draw button on the canvas.\n     */\n    getDrawingEnabled(): boolean {\n        return this.drawingEnabled;\n    }\n\n    /**\n     * Toggles drawing on the canvas. It is called via the draw button on the canvas.\n     */\n    toggleDrawingEnabled(): void {\n        this.drawingEnabled = !this.drawingEnabled;\n    }\n\n    /**\n     * Set if drawing is enabled from the client using the canvas\n     * @param drawingEnabled\n     */\n    setDrawingEnabled(drawingEnabled: boolean): void {\n        this.drawingEnabled = drawingEnabled;\n    }\n\n    /**\n     * @deprecated Please use the changeStrokeColor(newStrokeColor: string): void method\n     */\n    changeColor(newStrokeColor: string): void {\n        this.changeStrokeColor(newStrokeColor);\n    }\n\n    /**\n     * Replaces the drawing color with a new color\n     * The format should be (\"#ffffff\" or \"rgb(r,g,b,a?)\")\n     * This method is public so that anyone can access the canvas and change the stroke color\n     *\n     * @param newStrokeColor The new stroke color\n     */\n    changeStrokeColor(newStrokeColor: string): void {\n        this.strokeColor = newStrokeColor;\n\n        this.canvasWhiteboardShapePreviewOptions = this.generateShapePreviewOptions();\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Replaces the fill color with a new color\n     * The format should be (\"#ffffff\" or \"rgb(r,g,b,a?)\")\n     * This method is public so that anyone can access the canvas and change the fill color\n     *\n     * @param newFillColor The new fill color\n     */\n    changeFillColor(newFillColor: string): void {\n        this.fillColor = newFillColor;\n        this.canvasWhiteboardShapePreviewOptions = this.generateShapePreviewOptions();\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * This method is invoked by the undo button on the canvas screen\n     * It calls the global undo method and emits a notification after undoing.\n     * This method should only be called from the undo button in this component since it will emit an undo event\n     * If the client calls this method he may create a circular undo action which may cause danger.\n     */\n    undoLocal(): void {\n        this.undo((updateUUID) => {\n            this._redoStack.push(updateUUID);\n            this.onUndo.emit(updateUUID);\n        });\n    }\n\n    /**\n     * This methods selects the last uuid prepares it for undoing (making the whole update sequence invisible)\n     * This method can be called if the canvas component is a ViewChild of some other component.\n     * This method will work even if the undo button has been disabled\n     */\n    undo(callbackFn?: Function): void {\n        if (!this._undoStack.length) return;\n\n        let updateUUID = this._undoStack.pop();\n        this._undoCanvas(updateUUID);\n        callbackFn && callbackFn(updateUUID);\n    }\n\n    /**\n     * This method takes an UUID for an update, and redraws the canvas by making all updates with that uuid invisible\n     * @param updateUUID\n     */\n    private _undoCanvas(updateUUID: string): void {\n        if (this._shapesMap.has(updateUUID)) {\n            let shape = this._shapesMap.get(updateUUID);\n            shape.isVisible = false;\n            this.drawAllShapes();\n        }\n    }\n\n    /**\n     * This method is invoked by the redo button on the canvas screen\n     * It calls the global redo method and emits a notification after redoing\n     * This method should only be called from the redo button in this component since it will emit an redo event\n     * If the client calls this method he may create a circular redo action which may cause danger.\n     */\n    redoLocal(): void {\n        this.redo((updateUUID) => {\n            this._undoStack.push(updateUUID);\n            this.onRedo.emit(updateUUID);\n        });\n    }\n\n    /**\n     * This methods selects the last uuid prepares it for redoing (making the whole update sequence visible)\n     * This method can be called if the canvas component is a ViewChild of some other component.\n     * This method will work even if the redo button has been disabled\n     */\n    redo(callbackFn?: any): void {\n        if (!this._redoStack.length) return;\n\n        let updateUUID = this._redoStack.pop();\n        this._redoCanvas(updateUUID);\n        callbackFn && callbackFn(updateUUID);\n    }\n\n    /**\n     * This method takes an UUID for an update, and redraws the canvas by making all updates with that uuid visible\n     * @param updateUUID\n     */\n    private _redoCanvas(updateUUID: string): void {\n        if (this._shapesMap.has(updateUUID)) {\n            let shape = this._shapesMap.get(updateUUID);\n            shape.isVisible = true;\n\n            this.drawAllShapes();\n        }\n    }\n\n    /**\n     * Catches the Mouse and Touch events made on the canvas.\n     * If drawing is disabled (If an image exists but it's not loaded, or the user did not click Draw),\n     * this function does nothing.\n     *\n     * If a \"mousedown | touchstart\" event is triggered, dragging will be set to true and an CanvasWhiteboardUpdate object\n     * of type \"start\" will be drawn and then sent as an update to all receiving ends.\n     *\n     * If a \"mousemove | touchmove\" event is triggered and the client is dragging, an CanvasWhiteboardUpdate object\n     * of type \"drag\" will be drawn and then sent as an update to all receiving ends.\n     *\n     * If a \"mouseup, mouseout | touchend, touchcancel\" event is triggered, dragging will be set to false and\n     * an CanvasWhiteboardUpdate object of type \"stop\" will be drawn and then sent as an update to all receiving ends.\n     *\n     */\n    canvasUserEvents(event: any): void {\n        //Ignore all if we didn't click the _draw! button or the image did not load\n        if (!this.drawingEnabled || !this._canDraw) {\n            return;\n        }\n\n        // Ignore mouse move Events if we're not dragging\n        if (!this._clientDragging\n            && (event.type === 'mousemove'\n                || event.type === 'touchmove'\n                || event.type === 'mouseout'\n                || event.type === 'touchcancel'\n                || event.type === 'mouseup'\n                || event.type === 'touchend'\n                || event.type === 'mouseout')) {\n            return;\n        }\n\n        if (event.target == this._incompleteShapesCanvas.nativeElement || event.target == this.canvas.nativeElement) {\n            event.preventDefault();\n        }\n\n        let update: CanvasWhiteboardUpdate;\n        let updateType: number;\n        let eventPosition: CanvasWhiteboardPoint = this._getCanvasEventPosition(event);\n        update = new CanvasWhiteboardUpdate(eventPosition.x, eventPosition.y);\n\n        switch (event.type) {\n            case 'mousedown':\n            case 'touchstart':\n                this._clientDragging = true;\n                this._lastUUID = this._generateUUID();\n                updateType = CanvasWhiteboardUpdateType.START;\n                this._redoStack = [];\n\n                this._addCurrentShapeDataToAnUpdate(update);\n                break;\n            case 'mousemove':\n            case 'touchmove':\n                if (!this._clientDragging) {\n                    return;\n                }\n                updateType = CanvasWhiteboardUpdateType.DRAG;\n                break;\n            case 'touchcancel':\n            case 'mouseup':\n            case 'touchend':\n            case 'mouseout':\n                this._clientDragging = false;\n                updateType = CanvasWhiteboardUpdateType.STOP;\n                this._undoStack.push(this._lastUUID);\n                break;\n        }\n\n        update.UUID = this._lastUUID;\n        update.type = updateType;\n\n        this._draw(update);\n        this._prepareToSendUpdate(update);\n    }\n\n    /**\n     * Get the coordinates (x,y) from a given event\n     * If it is a touch event, get the touch positions\n     * If we released the touch, the position will be placed in the changedTouches object\n     * If it is not a touch event, use the original mouse event received\n     * @param eventData\n     */\n    private _getCanvasEventPosition(eventData: any): CanvasWhiteboardPoint {\n        let canvasBoundingRect = this.context.canvas.getBoundingClientRect();\n\n        let hasTouches = (eventData.touches && eventData.touches.length) ? eventData.touches[0] : null;\n        if (!hasTouches)\n            hasTouches = (eventData.changedTouches && eventData.changedTouches.length) ? eventData.changedTouches[0] : null;\n\n        let event = hasTouches ? hasTouches : eventData;\n\n        const scaleWidth = canvasBoundingRect.width / this.context.canvas.width;\n        const scaleHeight = canvasBoundingRect.height / this.context.canvas.height;\n\n        let xPosition = (event.clientX - canvasBoundingRect.left);\n        let yPosition = (event.clientY - canvasBoundingRect.top);\n\n        xPosition /= this.scaleFactor ? this.scaleFactor : scaleWidth;\n        yPosition /= this.scaleFactor ? this.scaleFactor : scaleHeight;\n\n        return new CanvasWhiteboardPoint(xPosition / this.context.canvas.width, yPosition / this.context.canvas.height);\n    }\n\n    /**\n     * The update coordinates on the canvas are mapped so that all receiving ends\n     * can reverse the mapping and get the same position as the one that\n     * was drawn on this update.\n     *\n     * @param update The CanvasWhiteboardUpdate object.\n     */\n    private _prepareToSendUpdate(update: CanvasWhiteboardUpdate): void {\n        this._prepareUpdateForBatchDispatch(update);\n    }\n\n\n    /**\n     * Catches the Key Up events made on the canvas.\n     * If the ctrlKey or commandKey(macOS) was held and the keyCode is 90 (z), an undo action will be performed\n     * If the ctrlKey or commandKey(macOS) was held and the keyCode is 89 (y), a redo action will be performed\n     * If the ctrlKey or commandKey(macOS) was held and the keyCode is 83 (s) or 115(S), a save action will be performed\n     *\n     * @param event The event that occurred.\n     */\n    private _canvasKeyDown(event: any): void {\n        if (event.ctrlKey || event.metaKey) {\n            if (event.keyCode === 90 && this.undoButtonEnabled) {\n                event.preventDefault();\n                this.undo();\n            }\n            if (event.keyCode === 89 && this.redoButtonEnabled) {\n                event.preventDefault();\n                this.redo();\n            }\n            if (event.keyCode === 83 || event.keyCode === 115) {\n                event.preventDefault();\n                this.saveLocal();\n            }\n        }\n    }\n\n    /**\n     * On window resize, recalculate the canvas dimensions and redraw the history\n     */\n    private _redrawCanvasOnResize(): void {\n        this._calculateCanvasWidthAndHeight();\n        this._redrawHistory();\n    }\n\n    /**\n     * Redraw the saved history after resetting the canvas state\n     */\n    private _redrawHistory(): void {\n        let updatesToDraw = [].concat(this._updateHistory);\n\n        this._removeCanvasData(() => {\n            updatesToDraw.forEach((update: CanvasWhiteboardUpdate) => {\n                this._draw(update);\n            });\n        });\n    }\n\n    /**\n     * Draws a CanvasWhiteboardUpdate object on the canvas.\n     * The coordinates are first reverse mapped so that they can be drawn in the proper place. The update\n     * is afterwards added to the undoStack so that it can be\n     *\n     * If the CanvasWhiteboardUpdate Type is \"start\", a new \"selectedShape\" is created.\n     * If the CanvasWhiteboardUpdate Type is \"drag\", the shape is taken from the shapesMap and then it's updated.\n     * Afterwards the context is used to draw the shape on the canvas.\n     * This function saves the last X and Y coordinates that were drawn.\n     *\n     * @param update The update object.\n     */\n    private _draw(update: CanvasWhiteboardUpdate): void {\n        this._updateHistory.push(update);\n\n        //map the canvas coordinates to our canvas size since they are scaled.\n        update = Object.assign(new CanvasWhiteboardUpdate(),\n            update,\n            {\n                x: update.x * this.context.canvas.width,\n                y: update.y * this.context.canvas.height\n            });\n\n        if (update.type === CanvasWhiteboardUpdateType.START) {\n            let updateShapeConstructor = this._canvasWhiteboardShapeService.getShapeConstructorFromShapeName(update.selectedShape);\n            let shape = new updateShapeConstructor(\n                new CanvasWhiteboardPoint(update.x, update.y),\n                Object.assign(new CanvasWhiteboardShapeOptions(), update.selectedShapeOptions)\n            );\n            this._incompleteShapesMap.set(update.UUID, shape);\n            this._drawIncompleteShapes();\n        } else if (update.type === CanvasWhiteboardUpdateType.DRAG) {\n            let shape = this._incompleteShapesMap.get(update.UUID);\n            shape && shape.onUpdateReceived(update);\n            this._drawIncompleteShapes();\n        } else if (CanvasWhiteboardUpdateType.STOP) {\n            let shape = this._incompleteShapesMap.get(update.UUID);\n            shape && shape.onStopReceived(update);\n\n            this._shapesMap.set(update.UUID, shape);\n            this._incompleteShapesMap.delete(update.UUID);\n            this._swapCompletedShapeToActualCanvas(shape);\n        }\n    }\n\n    private _drawIncompleteShapes() {\n        this._resetIncompleteShapeCanvas();\n        this._incompleteShapesMap.forEach((shape) => {\n            if (shape.isVisible) {\n                shape.draw(this._incompleteShapesCanvasContext);\n            }\n        });\n    }\n\n    private _swapCompletedShapeToActualCanvas(shape: CanvasWhiteboardShape) {\n        this._drawIncompleteShapes();\n        if (shape.isVisible) {\n            shape.draw(this.context);\n        }\n    }\n\n    private _resetIncompleteShapeCanvas() {\n        this._incompleteShapesCanvasContext.clearRect(0, 0, this._incompleteShapesCanvasContext.canvas.width, this._incompleteShapesCanvasContext.canvas.height);\n        this._incompleteShapesCanvasContext.fillStyle = \"transparent\";\n        this._incompleteShapesCanvasContext.fillRect(0, 0, this._incompleteShapesCanvasContext.canvas.width, this._incompleteShapesCanvasContext.canvas.height);\n    }\n\n    /**\n     * Delete everything from the screen, redraw the background, and then redraw all the shapes from the shapesMap\n     */\n    drawAllShapes() {\n        this._redrawBackground(() => {\n            this._shapesMap.forEach((shape: CanvasWhiteboardShape) => {\n                if (shape.isVisible) {\n                    shape.draw(this.context);\n                }\n            });\n        });\n    }\n\n    private _addCurrentShapeDataToAnUpdate(update: CanvasWhiteboardUpdate) {\n        if (!update.selectedShape) {\n            update.selectedShape = (new this.selectedShapeConstructor).getShapeName();\n        }\n\n        if (!update.selectedShapeOptions) {\n            //Make a deep copy since we don't want some Shape implementation to change something by accident\n            update.selectedShapeOptions = Object.assign(new CanvasWhiteboardShapeOptions(), this.generateShapePreviewOptions(), {lineWidth: this.lineWidth});\n        }\n    }\n\n    generateShapePreviewOptions(): CanvasWhiteboardShapeOptions {\n        return Object.assign(new CanvasWhiteboardShapeOptions(),\n            {\n                shouldFillShape: !!this.fillColor,\n                fillStyle: this.fillColor,\n                strokeStyle: this.strokeColor,\n                lineWidth: 2,\n                lineJoin: this.lineJoin,\n                lineCap: this.lineCap\n            });\n    }\n\n    /**\n     * Sends the update to all receiving ends as an Event emit. This is done as a batch operation (meaning\n     * multiple updates are sent at the same time). If this method is called, after 100 ms all updates\n     * that were made at that time will be packed up together and sent to the receiver.\n     *\n     * @param update The update object.\n     * @return Emits an Array of Updates when the batch.\n     */\n    private _prepareUpdateForBatchDispatch(update: CanvasWhiteboardUpdate): void {\n        this._batchUpdates.push(cloneDeep(update));\n        if (!this._updateTimeout) {\n            this._updateTimeout = setTimeout(() => {\n                this.onBatchUpdate.emit(this._batchUpdates);\n                this._batchUpdates = [];\n                this._updateTimeout = null;\n            }, this.batchUpdateTimeoutDuration);\n        }\n    };\n\n    /**\n     * Draws an Array of Updates on the canvas.\n     *\n     * @param updates The array with Updates.\n     */\n    drawUpdates(updates: CanvasWhiteboardUpdate[]): void {\n        if (this._canDraw) {\n            this._drawMissingUpdates();\n            updates.forEach((update: CanvasWhiteboardUpdate) => {\n                this._draw(update);\n            });\n        } else {\n            this._updatesNotDrawn = this._updatesNotDrawn.concat(updates);\n        }\n    };\n\n    /**\n     * Draw any missing updates that were received before the image was loaded\n     */\n    private _drawMissingUpdates(): void {\n        if (this._updatesNotDrawn.length > 0) {\n            let updatesToDraw = this._updatesNotDrawn;\n            this._updatesNotDrawn = [];\n\n            updatesToDraw.forEach((update: CanvasWhiteboardUpdate) => {\n                this._draw(update);\n            });\n        }\n    }\n\n    /**\n     * Draws an image on the canvas\n     *\n     * @param context The context used to draw the image on the canvas.\n     * @param image The image to draw.\n     * @param x The X coordinate for the starting draw position.\n     * @param y The Y coordinate for the starting draw position.\n     * @param width The width of the image that will be drawn.\n     * @param height The height of the image that will be drawn.\n     * @param offsetX The offsetX if the image size is larger than the canvas (aspect Ratio)\n     * @param offsetY The offsetY if the image size is larger than the canvas (aspect Ratio)\n     */\n    private _drawImage(context: any, image: any, x: number, y: number, width: number, height: number, offsetX: number, offsetY: number): void {\n        if (arguments.length === 2) {\n            x = y = 0;\n            width = context.canvas.width;\n            height = context.canvas.height;\n        }\n\n        offsetX = typeof offsetX === 'number' ? offsetX : 0.5;\n        offsetY = typeof offsetY === 'number' ? offsetY : 0.5;\n\n        if (offsetX < 0) offsetX = 0;\n        if (offsetY < 0) offsetY = 0;\n        if (offsetX > 1) offsetX = 1;\n        if (offsetY > 1) offsetY = 1;\n\n        let imageWidth = image.width;\n        let imageHeight = image.height;\n        let radius = Math.min(width / imageWidth, height / imageHeight);\n        let newWidth = imageWidth * radius;\n        let newHeight = imageHeight * radius;\n        let finalDrawX: any;\n        let finalDrawY: any;\n        let finalDrawWidth: any;\n        let finalDrawHeight: any;\n        let aspectRatio = 1;\n\n        // decide which gap to fill\n        if (newWidth < width) aspectRatio = width / newWidth;\n        if (Math.abs(aspectRatio - 1) < 1e-14 && newHeight < height) aspectRatio = height / newHeight;\n        newWidth *= aspectRatio;\n        newHeight *= aspectRatio;\n\n        // calculate source rectangle\n        finalDrawWidth = imageWidth / (newWidth / width);\n        finalDrawHeight = imageHeight / (newHeight / height);\n\n        finalDrawX = (imageWidth - finalDrawWidth) * offsetX;\n        finalDrawY = (imageHeight - finalDrawHeight) * offsetY;\n\n        // make sure the source rectangle is valid\n        if (finalDrawX < 0) finalDrawX = 0;\n        if (finalDrawY < 0) finalDrawY = 0;\n        if (finalDrawWidth > imageWidth) finalDrawWidth = imageWidth;\n        if (finalDrawHeight > imageHeight) finalDrawHeight = imageHeight;\n\n        // fill the image in destination rectangle\n        context.drawImage(image, finalDrawX, finalDrawY, finalDrawWidth, finalDrawHeight, x, y, width, height);\n    }\n\n    /**\n     * The HTMLCanvasElement.toDataURL() method returns a data URI containing a representation of the image in the format specified by the type parameter (defaults to PNG).\n     * The returned image is in a resolution of 96 dpi.\n     * If the height or width of the canvas is 0, the string \"data:,\" is returned.\n     * If the requested type is not image/png, but the returned value starts with data:image/png, then the requested type is not supported.\n     * Chrome also supports the image/webp type.\n     *\n     * @param returnedDataType A DOMString indicating the image format. The default format type is image/png.\n     * @param returnedDataQuality A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp.\n     If this argument is anything else, the default value for image quality is used. The default value is 0.92. Other arguments are ignored.\n     */\n    generateCanvasDataUrl(returnedDataType: string = \"image/png\", returnedDataQuality: number = 1): string {\n        return this.context.canvas.toDataURL(returnedDataType, returnedDataQuality);\n    }\n\n    /**\n     * Generate a Blob object representing the content drawn on the canvas.\n     * This file may be cached on the disk or stored in memory at the discretion of the user agent.\n     * If type is not specified, the image type is image/png. The created image is in a resolution of 96dpi.\n     * The third argument is used with image/jpeg images to specify the quality of the output.\n     *\n     * @param callbackFn The function that should be executed when the blob is created. Should accept a parameter Blob (for the result).\n     * @param returnedDataType A DOMString indicating the image format. The default type is image/png.\n     * @param returnedDataQuality A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp.\n     If this argument is anything else, the default value for image quality is used. Other arguments are ignored.\n     */\n    generateCanvasBlob(callbackFn: any, returnedDataType: string = \"image/png\", returnedDataQuality: number = 1): void {\n        let toBlobMethod: Function;\n\n        if (typeof this.context.canvas.toBlob !== \"undefined\") {\n            toBlobMethod = this.context.canvas.toBlob.bind(this.context.canvas);\n        } else if (typeof this.context.canvas.msToBlob !== \"undefined\") {\n            toBlobMethod = (callback) => {\n                callback && callback(this.context.canvas.msToBlob());\n            };\n        }\n\n        toBlobMethod && toBlobMethod((blob: Blob) => {\n            callbackFn && callbackFn(blob, returnedDataType);\n        }, returnedDataType, returnedDataQuality);\n    }\n\n    /**\n     * Generate a canvas image representation and download it locally\n     * The name of the image is canvas_drawing_ + the current local Date and Time the image was created\n     * Methods for standalone creation of the images in this method are left here for backwards compatibility\n     *\n     * @param returnedDataType A DOMString indicating the image format. The default type is image/png.\n     * @param downloadData? The created string or Blob (IE).\n     * @param customFileName? The name of the file that should be downloaded\n     */\n    downloadCanvasImage(returnedDataType: string = \"image/png\", downloadData?: string | Blob, customFileName?: string): void {\n        if (window.navigator.msSaveOrOpenBlob === undefined) {\n            let downloadLink = document.createElement('a');\n            downloadLink.setAttribute('href', downloadData ? <string>downloadData : this.generateCanvasDataUrl(returnedDataType));\n\n            let fileName = customFileName ? customFileName\n                : (this.downloadedFileName ? this.downloadedFileName : \"canvas_drawing_\" + new Date().valueOf());\n\n            downloadLink.setAttribute('download', fileName + this._generateDataTypeString(returnedDataType));\n            document.body.appendChild(downloadLink);\n            downloadLink.click();\n            document.body.removeChild(downloadLink);\n        } else {\n            // IE-specific code\n            if (downloadData) {\n                this._saveCanvasBlob(<Blob>downloadData, returnedDataType);\n            } else {\n                this.generateCanvasBlob(this._saveCanvasBlob.bind(this), returnedDataType);\n            }\n        }\n    }\n\n    /**\n     * Save the canvas blob (IE) locally\n     * @param blob\n     * @param returnedDataType\n     */\n    private _saveCanvasBlob(blob: Blob, returnedDataType: string = \"image/png\"): void {\n        window.navigator.msSaveOrOpenBlob(blob, \"canvas_drawing_\" + new Date().valueOf() + this._generateDataTypeString(returnedDataType));\n    }\n\n    /**\n     * This method generates a canvas url string or a canvas blob with the presented data type\n     * A callback function is then invoked since the blob creation must be done via a callback\n     *\n     * @param callback\n     * @param returnedDataType\n     * @param returnedDataQuality\n     */\n    generateCanvasData(callback: any, returnedDataType: string = \"image/png\", returnedDataQuality: number = 1): void {\n        if (window.navigator.msSaveOrOpenBlob === undefined) {\n            callback && callback(this.generateCanvasDataUrl(returnedDataType, returnedDataQuality))\n        } else {\n            this.generateCanvasBlob(callback, returnedDataType, returnedDataQuality);\n        }\n    }\n\n    /**\n     * Local method to invoke saving of the canvas data when clicked on the canvas Save button\n     * This method will emit the generated data with the specified Event Emitter\n     *\n     * @param returnedDataType\n     */\n    saveLocal(returnedDataType: string = \"image/png\"): void {\n        this.generateCanvasData((generatedData: string | Blob) => {\n            this.onSave.emit(generatedData);\n\n            if (this.shouldDownloadDrawing) {\n                this.downloadCanvasImage(returnedDataType, generatedData);\n            }\n        });\n    }\n\n    private _generateDataTypeString(returnedDataType: string): string {\n        if (returnedDataType) {\n            return \".\" + returnedDataType.split('/')[1];\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Toggles the color picker window, delegating the showColorPicker Input to the ColorPickerComponent.\n     * If no value is supplied (null/undefined) the current value will be negated and used.\n     * @param value\n     */\n    toggleStrokeColorPicker(value: boolean) {\n        this.showStrokeColorPicker = !this._isNullOrUndefined(value) ? value : !this.showStrokeColorPicker;\n    }\n\n    /**\n     * Toggles the color picker window, delegating the showColorPicker Input to the ColorPickerComponent.\n     * If no value is supplied (null/undefined) the current value will be negated and used.\n     * @param value\n     */\n    toggleFillColorPicker(value: boolean) {\n        this.showFillColorPicker = !this._isNullOrUndefined(value) ? value : !this.showFillColorPicker;\n    }\n\n    /**\n     * Toggles the shape selector window, delegating the showShapeSelector Input to the CanvasWhiteboardShapeSelectorComponent.\n     * If no value is supplied (null/undefined) the current value will be negated and used.\n     * @param value\n     */\n    toggleShapeSelector(value: boolean) {\n        this.showShapeSelector = !this._isNullOrUndefined(value) ? value : !this.showShapeSelector;\n    }\n\n    selectShape(newShapeBlueprint: INewCanvasWhiteboardShape<CanvasWhiteboardShape>) {\n        this.selectedShapeConstructor = newShapeBlueprint;\n    }\n\n    /**\n     * Returns a deep copy of the current drawing history for the canvas.\n     * The deep copy is returned because we don't want anyone to mutate the current history\n     */\n    getDrawingHistory(): CanvasWhiteboardUpdate[] {\n        return cloneDeep(this._updateHistory);\n    }\n\n    /**\n     * Unsubscribe from a given subscription if it is active\n     * @param subscription\n     */\n    private _unsubscribe(subscription: Subscription): void {\n        if (subscription) subscription.unsubscribe();\n    }\n\n    private _generateUUID(): string {\n        return this._random4() + this._random4() + \"-\" + this._random4() + \"-\" + this._random4() + \"-\" +\n            this._random4() + \"-\" + this._random4() + this._random4() + this._random4();\n    }\n\n    private _random4(): string {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    }\n\n    /**\n     * Unsubscribe from the service observables\n     */\n    ngOnDestroy(): void {\n        this._unsubscribe(this._resizeSubscription);\n        this._unsubscribe(this._registeredShapesSubscription);\n        this._canvasWhiteboardServiceSubscriptions.forEach(subscription => this._unsubscribe(subscription));\n    }\n}\n","import {Injectable} from \"@angular/core\";\nimport {CanvasWhiteboardShape} from \"./canvas-whiteboard-shape\";\nimport {CircleShape} from \"./circle-shape\";\nimport {RectangleShape} from \"./rectangle-shape\";\nimport {FreeHandShape} from \"./free-hand-shape\";\nimport {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\nimport {CanvasWhiteboardPoint} from \"../canvas-whiteboard-point\";\nimport {SmileyShape} from \"./smiley-shape\";\nimport {StarShape} from \"./star-shape\";\nimport {LineShape} from \"./line-shape\";\nimport {BehaviorSubject, Observable} from \"rxjs/index\";\n\nexport interface INewCanvasWhiteboardShape<T extends CanvasWhiteboardShape> {\n    new(positionPoint?: CanvasWhiteboardPoint, options?: CanvasWhiteboardShapeOptions, ...args: any[]): T;\n}\n\n@Injectable()\nexport class CanvasWhiteboardShapeService {\n    private _registeredShapesSubject: BehaviorSubject<Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>>;\n    public registeredShapes$: Observable<Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>>;\n\n    constructor() {\n        this._registeredShapesSubject = new BehaviorSubject([\n            FreeHandShape,\n            LineShape,\n            RectangleShape,\n            CircleShape,\n            StarShape,\n            SmileyShape\n        ]);\n        this.registeredShapes$ = this._registeredShapesSubject.asObservable();\n    }\n\n    getShapeConstructorFromShapeName(shapeName: string): INewCanvasWhiteboardShape<CanvasWhiteboardShape> {\n        return this.getCurrentRegisteredShapes().find((shape) =>\n            (new shape).getShapeName() === shapeName);\n    }\n\n    getCurrentRegisteredShapes(): Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>> {\n        return this._registeredShapesSubject.getValue();\n    }\n\n    isRegisteredShape(shape: INewCanvasWhiteboardShape<CanvasWhiteboardShape>) {\n        return this.getCurrentRegisteredShapes().indexOf(shape) !== -1;\n    }\n\n    registerShape(shape: INewCanvasWhiteboardShape<CanvasWhiteboardShape>) {\n        if (this.isRegisteredShape(shape)) {\n            console.warn(`You tried to register a shape:${shape}, but is has already been registered.`);\n            return;\n        }\n\n        let registeredShapes = this.getCurrentRegisteredShapes();\n        registeredShapes.push(shape);\n        this._registeredShapesSubject.next(registeredShapes);\n    }\n\n    registerShapes(shapes: Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>) {\n        this._registeredShapesSubject.next(\n            this.getCurrentRegisteredShapes()\n                .concat(\n                    shapes.filter((shape) => {\n                        if (this.isRegisteredShape(shape)) {\n                            console.warn(`You tried to register a shape:${shape}, but is has already been registered.`);\n                            return false;\n                        }\n\n                        return true;\n                    })\n                )\n        );\n    }\n\n    unregisterShape(shape: INewCanvasWhiteboardShape<CanvasWhiteboardShape>) {\n        this._registeredShapesSubject.next(\n            this.getCurrentRegisteredShapes().filter((registeredShape) => registeredShape !== shape)\n        );\n    }\n\n    unregisterShapes(shapes: Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>) {\n        this._registeredShapesSubject.next(\n            this.getCurrentRegisteredShapes().filter((shape) => shapes.indexOf(shape) === -1)\n        );\n    }\n}\n","import {CanvasWhiteboardShape} from \"./canvas-whiteboard-shape\";\nimport {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\nimport {CanvasWhiteboardPoint} from \"../canvas-whiteboard-point\";\nimport {CanvasWhiteboardUpdate} from \"../canvas-whiteboard-update.model\";\n\nexport class LineShape extends CanvasWhiteboardShape {\n    endPosition: CanvasWhiteboardPoint;\n\n    constructor(positionPoint?: CanvasWhiteboardPoint,\n                options?: CanvasWhiteboardShapeOptions,\n                endPosition?: CanvasWhiteboardPoint) {\n        super(positionPoint, options);\n        this.endPosition = endPosition || new CanvasWhiteboardPoint(this.positionPoint.x, this.positionPoint.y);\n    }\n\n    getShapeName(): string {\n        return 'LineShape';\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        if (!this.endPosition) {\n            return;\n        }\n        context.beginPath();\n        Object.assign(context, this.options);\n\n        context.moveTo(this.positionPoint.x, this.positionPoint.y);\n        context.lineTo(this.endPosition.x, this.endPosition.y);\n\n        context.closePath();\n        context.stroke();\n    }\n\n    drawPreview(context: CanvasRenderingContext2D) {\n        this.positionPoint = new CanvasWhiteboardPoint(0, 0);\n        this.endPosition = new CanvasWhiteboardPoint(context.canvas.width, context.canvas.height);\n        this.draw(context);\n    }\n\n    onUpdateReceived(update: CanvasWhiteboardUpdate) {\n        this.endPosition = new CanvasWhiteboardPoint(update.x, update.y);\n    }\n}\n","import {CanvasWhiteboardShape} from \"./canvas-whiteboard-shape\";\nimport {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\nimport {CanvasWhiteboardPoint} from \"../canvas-whiteboard-point\";\nimport {CanvasWhiteboardUpdate} from \"../canvas-whiteboard-update.model\";\n\nexport class StarShape extends CanvasWhiteboardShape {\n    radius: number;\n    spikes: number;\n\n    constructor(positionPoint?: CanvasWhiteboardPoint,\n                options?: CanvasWhiteboardShapeOptions,\n                radius?: number,\n                spikes?: number) {\n        super(positionPoint, options);\n        this.radius = radius || 0;\n        this.spikes = spikes || 5;\n    }\n\n    getShapeName(): string {\n        return 'StarShape';\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        Object.assign(context, this.options);\n\n        let rotation = Math.PI / 2 * 3;\n        let spikeX = this.positionPoint.x;\n        let spikeY = this.positionPoint.y;\n        let step = Math.PI / this.spikes;\n\n        context.beginPath();\n        context.moveTo(this.positionPoint.x, this.positionPoint.y - this.radius);\n\n        for (let i = 0; i < this.spikes; i++) {\n            spikeX = this.positionPoint.x + Math.cos(rotation) * this.radius;\n            spikeY = this.positionPoint.y + Math.sin(rotation) * this.radius;\n            context.lineTo(spikeX, spikeY);\n            rotation += step;\n\n            spikeX = this.positionPoint.x + Math.cos(rotation) * (this.radius * 0.4);\n            spikeY = this.positionPoint.y + Math.sin(rotation) * (this.radius * 0.4);\n            context.lineTo(spikeX, spikeY);\n            rotation += step;\n            context.stroke();\n        }\n\n        context.lineTo(this.positionPoint.x, this.positionPoint.y - this.radius);\n        context.closePath();\n\n        context.stroke();\n\n        if (this.options.shouldFillShape) {\n            context.fill();\n        }\n    }\n\n    drawPreview(context: CanvasRenderingContext2D) {\n        this.positionPoint = new CanvasWhiteboardPoint(context.canvas.width / 2, context.canvas.height / 2);\n        this.radius = this.calculateRadius(context.canvas.width - 2, context.canvas.height / 2);\n        this.draw(context);\n    }\n\n    onUpdateReceived(update: CanvasWhiteboardUpdate) {\n        this.radius = this.calculateRadius(update.x, update.y);\n    }\n\n    calculateRadius(x: number, y: number): number {\n        return Math.sqrt(Math.pow(x - this.positionPoint.x, 2) + Math.pow(y - this.positionPoint.y, 2));\n    }\n}\n","import {CanvasWhiteboardShape} from \"./canvas-whiteboard-shape\";\nimport {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\nimport {CanvasWhiteboardPoint} from \"../canvas-whiteboard-point\";\nimport {CanvasWhiteboardUpdate} from \"../canvas-whiteboard-update.model\";\n\nexport class SmileyShape extends CanvasWhiteboardShape {\n    radius: number;\n\n    constructor(positionPoint?: CanvasWhiteboardPoint, options?: CanvasWhiteboardShapeOptions, radius?: number) {\n        super(positionPoint, options);\n        this.options.shouldFillShape = true;\n        this.options.fillStyle = this.options.fillStyle || \"yellow\";\n\n        this.radius = radius || 0;\n    }\n\n    getShapeName(): string {\n        return 'SmileyShape';\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        context.beginPath();\n\n        Object.assign(context, this.options);\n\n        context.arc(this.positionPoint.x, this.positionPoint.y, this.radius, 0, Math.PI * 2, false);\n        context.fill();\n        context.stroke();\n\n        context.beginPath();\n        let leftEyeX = this.positionPoint.x - this.radius * 0.3;\n        let rightEyeX = this.positionPoint.x + this.radius * 0.3;\n        const eyesY = this.positionPoint.y - this.radius * 0.2;\n        const eyeSize = this.radius * 0.1;\n\n        context.arc(leftEyeX, eyesY, eyeSize, 0, 2 * Math.PI, false);\n        context.arc(rightEyeX, eyesY, eyeSize, 0, 2 * Math.PI, false);\n        context.fillStyle = this.options.strokeStyle;\n        context.fill();\n\n        // draw the mouth\n        context.beginPath();\n        context.arc(this.positionPoint.x, this.positionPoint.y, this.radius * 0.7, 0, Math.PI, false);\n        context.stroke();\n\n        context.closePath();\n    }\n\n    drawPreview(context: CanvasRenderingContext2D) {\n        this.positionPoint = new CanvasWhiteboardPoint(context.canvas.width / 2, context.canvas.height / 2);\n        this.radius = this.calculateRadius(context.canvas.width - 2, context.canvas.height / 2);\n        this.draw(context);\n    }\n\n    onUpdateReceived(update: CanvasWhiteboardUpdate) {\n        this.radius = this.calculateRadius(update.x, update.y);\n    }\n\n    calculateRadius(x: number, y: number): number {\n        return Math.sqrt(Math.pow(x - this.positionPoint.x, 2) + Math.pow(y - this.positionPoint.y, 2));\n    }\n}\n","import {CanvasWhiteboardShape} from \"./canvas-whiteboard-shape\";\nimport {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\nimport {CanvasWhiteboardPoint} from \"../canvas-whiteboard-point\";\nimport {CanvasWhiteboardUpdate} from \"../canvas-whiteboard-update.model\";\n\nexport class FreeHandShape extends CanvasWhiteboardShape {\n    linePositions: CanvasWhiteboardPoint[];\n\n    constructor(positionPoint?: CanvasWhiteboardPoint, options?: CanvasWhiteboardShapeOptions) {\n        super(positionPoint, options);\n        this.linePositions = [];\n    }\n\n    getShapeName(): string {\n        return 'FreeHandShape';\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        Object.assign(context, this.options);\n\n        context.beginPath();\n        context.moveTo(this.positionPoint.x, this.positionPoint.y);\n        // Draw a dot\n        context.lineTo(this.positionPoint.x + 1, this.positionPoint.y + 1);\n\n        // Normal fastest free hand drawing\n        // this.linePositions.forEach((linePosition) => {\n        //     context.lineTo(linePosition.x, linePosition.y);\n        // });\n\n        // Quadratic curves drawing\n        let i = 0;\n        while (i < this.linePositions.length) {\n            if (this.linePositions.length - i > 2) {\n                let controlPoint1 = this.linePositions[i];\n                let controlPoint2 = this.linePositions[i + 1];\n                let endPoint = this.linePositions[i + 2];\n                context.bezierCurveTo(controlPoint1.x,\n                    controlPoint1.y,\n                    controlPoint2.x,\n                    controlPoint2.y,\n                    endPoint.x,\n                    endPoint.y);\n                i += 2;\n            } else {\n                let linePosition = this.linePositions[i];\n                context.lineTo(linePosition.x, linePosition.y);\n                i += 1;\n            }\n        }\n\n        context.stroke();\n    }\n\n    drawPreview(context: CanvasRenderingContext2D) {\n        this.positionPoint = new CanvasWhiteboardPoint(2, 2);\n        this.linePositions = [\n            new CanvasWhiteboardPoint(context.canvas.width - 5, context.canvas.height * 0.3),\n            // new CanvasWhiteboardPoint(context.canvas.width * 0.4, context.canvas.height * 0.6),\n            new CanvasWhiteboardPoint(context.canvas.width * 0.2, context.canvas.height * 0.4),\n            new CanvasWhiteboardPoint(context.canvas.width * 0.6, context.canvas.height * 0.8),\n            new CanvasWhiteboardPoint(context.canvas.width, context.canvas.height)\n        ];\n\n        this.draw(context);\n    }\n\n    onUpdateReceived(update: CanvasWhiteboardUpdate) {\n        this.linePositions.push(new CanvasWhiteboardPoint(update.x, update.y));\n    }\n}\n","import {CanvasWhiteboardShape} from \"./canvas-whiteboard-shape\";\nimport {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\nimport {CanvasWhiteboardPoint} from \"../canvas-whiteboard-point\";\nimport {CanvasWhiteboardUpdate} from \"../canvas-whiteboard-update.model\";\n\nexport class RectangleShape extends CanvasWhiteboardShape {\n    width: number;\n    height: number;\n\n    constructor(positionPoint?: CanvasWhiteboardPoint,\n                options?: CanvasWhiteboardShapeOptions,\n                width?: number,\n                height?: number) {\n        super(positionPoint, options);\n        this.width = width || 0;\n        this.height = height || 0;\n    }\n\n    getShapeName(): string {\n        return 'RectangleShape';\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        if (!this.width || !this.height) {\n            return;\n        }\n        context.beginPath();\n\n        Object.assign(context, this.options);\n\n        context.rect(this.positionPoint.x, this.positionPoint.y, this.width, this.height);\n\n        context.stroke();\n        if (this.options.shouldFillShape) {\n            context.fill();\n        }\n\n        context.closePath();\n    }\n\n    drawPreview(context: CanvasRenderingContext2D) {\n        this.positionPoint = new CanvasWhiteboardPoint(2, 2);\n        this.width = context.canvas.width - 4;\n        this.height = context.canvas.height - 4;\n        this.draw(context);\n    }\n\n    onUpdateReceived(update: CanvasWhiteboardUpdate) {\n        this.width = update.x - this.positionPoint.x;\n        this.height = update.y - this.positionPoint.y;\n    }\n}\n","import {CanvasWhiteboardShape} from \"./canvas-whiteboard-shape\";\nimport {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\nimport {CanvasWhiteboardPoint} from \"../canvas-whiteboard-point\";\nimport {CanvasWhiteboardUpdate} from \"../canvas-whiteboard-update.model\";\n\nexport class CircleShape extends CanvasWhiteboardShape {\n    radius: number;\n\n    constructor(positionPoint?: CanvasWhiteboardPoint, options?: CanvasWhiteboardShapeOptions, radius?: number) {\n        super(positionPoint, options);\n        this.radius = radius || 0;\n    }\n\n    getShapeName(): string {\n        return 'CircleShape';\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        context.beginPath();\n        context.arc(this.positionPoint.x, this.positionPoint.y, this.radius, 0, Math.PI * 2, false);\n\n        Object.assign(context, this.options);\n\n        context.stroke();\n        if (this.options.shouldFillShape) {\n            context.fill();\n        }\n\n        context.closePath();\n    }\n\n    drawPreview(context: CanvasRenderingContext2D) {\n        this.positionPoint = new CanvasWhiteboardPoint(context.canvas.width / 2, context.canvas.height / 2);\n        this.radius = this.calculateRadius(context.canvas.width - 2, context.canvas.height / 2);\n        this.draw(context);\n    }\n\n    onUpdateReceived(update: CanvasWhiteboardUpdate) {\n        this.radius = this.calculateRadius(update.x, update.y);\n    }\n\n    calculateRadius(x: number, y: number): number {\n        return Math.sqrt(Math.pow(x - this.positionPoint.x, 2) + Math.pow(y - this.positionPoint.y, 2));\n    }\n}\n","import {CanvasWhiteboardShapeOptions} from \"./canvas-whiteboard-shape-options\";\nimport {CanvasWhiteboardPoint} from \"../canvas-whiteboard-point\";\nimport {CanvasWhiteboardUpdate} from \"../canvas-whiteboard-update.model\";\n\nexport abstract class CanvasWhiteboardShape {\n    isVisible: boolean;\n    protected positionPoint: CanvasWhiteboardPoint;\n    protected options: CanvasWhiteboardShapeOptions;\n\n    constructor(positionPoint?: CanvasWhiteboardPoint, options?: CanvasWhiteboardShapeOptions) {\n        this.positionPoint = positionPoint || new CanvasWhiteboardPoint(0, 0);\n        this.options = options || new CanvasWhiteboardShapeOptions();\n        this.isVisible = true;\n    }\n\n    abstract getShapeName(): string;\n\n    abstract onUpdateReceived(update: CanvasWhiteboardUpdate);\n\n    // noinspection TsLint\n    onStopReceived(update: CanvasWhiteboardUpdate) {\n    }\n\n    abstract draw(context: CanvasRenderingContext2D);\n\n    abstract drawPreview(context: CanvasRenderingContext2D);\n}","export class CanvasWhiteboardShapeOptions {\n    shouldFillShape?: boolean;\n    fillStyle?: string;\n    strokeStyle?: string;\n    lineWidth?: number;\n    lineJoin?: string;\n    lineCap?: string;\n\n    constructor() {\n        this.shouldFillShape = false;\n        this.fillStyle = null;\n        this.strokeStyle = \"rgba(0,0,0,1)\";\n        this.lineWidth = 2;\n        this.lineJoin = \"round\";\n        this.lineCap = \"round\";\n    }\n}\n","export class CanvasWhiteboardPoint {\n    x: number;\n    y: number;\n\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n}","import {CanvasWhiteboardUpdate} from \"./canvas-whiteboard-update.model\";\nimport {Observable, Subject} from \"rxjs/index\";\n\nexport class CanvasWhiteboardService {\n    private _canvasDrawSubject: Subject<CanvasWhiteboardUpdate[]> = new Subject();\n    canvasDrawSubject$: Observable<CanvasWhiteboardUpdate[]> = this._canvasDrawSubject.asObservable();\n\n    private _canvasClearSubject: Subject<any> = new Subject();\n    canvasClearSubject$: Observable<any> = this._canvasClearSubject.asObservable();\n\n    private _canvasUndoSubject: Subject<any> = new Subject();\n    canvasUndoSubject$: Observable<any> = this._canvasUndoSubject.asObservable();\n\n    private _canvasRedoSubject: Subject<any> = new Subject();\n    canvasRedoSubject$: Observable<any> = this._canvasRedoSubject.asObservable();\n\n    public drawCanvas(updates: CanvasWhiteboardUpdate[]): void {\n        this._canvasDrawSubject.next(updates);\n    }\n\n    public clearCanvas(): void {\n        this._canvasClearSubject.next();\n    }\n\n    public undoCanvas(updateUUD: string): void {\n        this._canvasUndoSubject.next(updateUUD);\n    }\n\n    public redoCanvas(updateUUD: string): void {\n        this._canvasRedoSubject.next(updateUUD);\n    }\n}\n","export const DEFAULT_STYLES = `\n.canvas_whiteboard_button {\n    display: inline-block;\n    outline: 0px;\n    padding-top: 7px;\n    margin-bottom: 0;\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 1.42857143;\n    text-align: center;\n    white-space: nowrap;\n    vertical-align: middle;\n    -ms-touch-action: manipulation;\n    touch-action: manipulation;\n    cursor: pointer;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    background-image: none;\n    border: 1px solid transparent;\n    border-radius: 4px;\n}\n\n.canvas_whiteboard_buttons { \n    z-index: 3;\n}\n\n@media (max-width: 400px) {\n     .canvas_whiteboard_buttons {\n            position: absolute;\n            z-inde\n            top: 0;\n            width: 100%;\n            text-align: center;\n      }\n}\n        \n@media (min-width: 401px) { \n    .canvas_whiteboard_buttons {\n        position: absolute;\n        right: 0%;\n        color: #fff;\n    }\n}\n\n.canvas_whiteboard_buttons {\n    padding: 5px;\n}\n\n.canvas_whiteboard_buttons > button {\n    margin: 5px;\n}\n\n.canvas_whiteboard_button-draw_animated {\n    -webkit-animation: pulsate 1s ease-out;\n    -webkit-animation-iteration-count: infinite;\n}\n\n@-webkit-keyframes pulsate {\n    0% {\n        -webkit-transform: scale(0.1, 0.1);\n        opacity: 0.0;\n    }\n    50% {\n        opacity: 1.0;\n    }\n    100% {\n        -webkit-transform: scale(1.2, 1.2);\n        opacity: 0.0;\n    }\n}\n.canvas_wrapper_div {\n    width: 100%;\n    height: 100%;\n    border: 0.5px solid #e2e2e2;\n}\n\n.canvas_whiteboard_button-clear {\n    padding-top: 5px;\n}\n\n.canvas_whiteboard {\n    position: absolute;\n    z-index: 1;\n}\n\n.incomplete_shapes_canvas_whiteboard {\n    position: absolute;\n    z-index: 2;\n}\n\n`;","import {CanvasWhiteboardShapeOptions} from \"./shapes/canvas-whiteboard-shape-options\";\n\nexport enum CanvasWhiteboardUpdateType {\n    START = 0,\n    DRAG = 1,\n    STOP = 2\n}\n\nexport class CanvasWhiteboardUpdate {\n    x: number;\n    y: number;\n    type: CanvasWhiteboardUpdateType;\n    UUID: string;\n\n    selectedShape: string;\n    selectedShapeOptions: CanvasWhiteboardShapeOptions;\n\n    static deserializeJson(json: any): CanvasWhiteboardUpdate {\n        let parsedJson;\n        try {\n            parsedJson = JSON.parse(json);\n            return new CanvasWhiteboardUpdate(\n                parsedJson['x'],\n                parsedJson['y'],\n                parsedJson['type'],\n                parsedJson['uuid'],\n                parsedJson['selectedShape'],\n                parsedJson['selectedShapeOptions']);\n        } catch (e) {\n            console.error(\"The canvas whiteboard update is not p1\" +\n                \"arseable\");\n            return null;\n        }\n    }\n\n    constructor(x?: number,\n                y?: number,\n                type?: CanvasWhiteboardUpdateType,\n                UUID?: string,\n                selectedShape?: string,\n                selectedShapeOptions?: CanvasWhiteboardShapeOptions) {\n        this.x = x;\n        this.y = y;\n        this.type = type;\n        this.UUID = UUID;\n        this.selectedShape = selectedShape;\n        this.selectedShapeOptions = selectedShapeOptions;\n    }\n\n    stringify(): string {\n        let objectToSerialize = {\n            x: this.x.toFixed(3),\n            y: this.y.toFixed(3),\n            type: this.type,\n            uuid: this.UUID,\n            selectedShape: this.selectedShape\n        };\n\n        if (this.selectedShapeOptions) {\n            objectToSerialize[\"selectedShapeOptions\"] = this.selectedShapeOptions;\n        }\n\n        return JSON.stringify(objectToSerialize);\n    }\n}\n"],"names":[],"mappings":"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"}